#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 26, 2018 12:01:25 PM
import sys
import csv
import tkMessageBox
from tkFileDialog import askopenfilename
import copy
import SampleVsPopulation as svp
import SampleVsSample as svs
import ChiTest as ct
import os
import numpy as np
from collections import Counter

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import Mother_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0, 0)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (root)
    Mother_support.init(root, top)
    root.mainloop()

w = None
def create_OOTO_Miner(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (w)
    Mother_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_OOTO_Miner():
    global w
    w.destroy()
    w = None

def readFeatures(filename, varMark):
    features = []
    with open(filename) as f:
        reader = csv.reader(f)
        for row in reader:
            if(row[0]==varMark):
                new_feature = {'Description':row[2], 'Code':row[1], 'Responses':[]}
                features.append(new_feature)
            else:
                new_response = {'Group':row[0], 'Code':row[1], 'Description':row[2]}
                new_feature['Responses'].append(new_response)
    return features
'''
def convertToGroup(features):
    groupedFeatures = copy.deepcopy(features)
    for feature in groupedFeatures:
        for response in feature['Responses']:
            '''

def readCSVDict(filename):
    rows = csv.DictReader(open(filename))
    return rows   

def writeCSVDict(filename, dataset):
    with open(filename, 'wb') as f:
        w = csv.DictWriter(f, dataset[0].keys())
        w.writeheader()
        w.writerows(dataset)

'''
Returns a new dataset by filtering from the old one based on a feature and its selected values
'''
def filterDataset(dataset, feature, responses):
    new_data = []
    for record in dataset['Data']:
        for response in responses:
            if record[feature['Code']] == response['Code']:
                new_data.append(copy.deepcopy(record))
                break
    
    return new_data


def convertDatasetValuesToGroups(dataset, features):
    #response['Code'] == record[self.datasetA['Feature']['Code']] for response in self.datasetA['Selected Responses']
    for record in dataset['Data']:
        for feature in features:
            converted = False
            if feature['Code'] in record.keys(): #If the feature code exists in the record
                for response in feature['Responses']:
                    if record[feature['Code']] == response['Code']:
                        record[feature['Code']] = response['Group']
                        converted = True
                #if not any(record[feature['Code'] == response['Code'] for response in feature['Responses']):
                if not converted:
                    record[feature['Code']] = '-1.0'
            else:
                record[feature['Code']] = '-1.0'
    return dataset

def removeFiles(fileNames):
    for fileName in fileNames:
        os.remove(fileName)
    
def makeFileName(dataset):
    featureDesc = copy.deepcopy(dataset['Feature']['Description'])
    if(len(featureDesc) > 10):
        featureDesc = featureDesc[:11]
    fileName = featureDesc
    for response in dataset['Feature']['Selected Responses']:
        fileName = fileName + response['Description'] + "_"
    fileName = fileName + ".csv"
    return fileName

def makeUpdatedVariables(features, fileName):
    with open(fileName, "wb") as csv_file:
        writer = csv.writer(csv_file, delimiter=',')
        for feature in features:
            featureRow = []
            featureRow.append('^')
            featureRow.append(feature['Code'])
            featureRow.append(feature['Description'])
            #Write that featureRow
            writer.writerow(featureRow)
            groups = [] 
            for response in feature['Responses']: 
                responseRow = []
                if response['Group'] not in groups:
                    groups.append(response['Group'])
                    responseRow.append(response['Group'])
                    responseRow.append('Group ' + response['Group'])
                    #Write that responseRow
                    writer.writerow(responseRow)
'''
Concatenates all of the focus feature values together using a ':'
'''
def getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues):
    allValues = ""
    for i in range(0, len(selectedFocusFeature['Responses'])):
        if(i == len(selectedFocusFeature['Responses'])-1):
            allValues = allValues + str(selectedFocusFeature['Responses'][i]['Code'])
        else:
            allValues = allValues + str(selectedFocusFeature['Responses'][i]['Code']) + ":"          
    selectedValues = ""
    for i in range(0, len(selectedFocusFeatureValues)):
        if(i == len(selectedFocusFeatureValues)-1):
            selectedValues = selectedValues + str(selectedFocusFeatureValues[i])
        else:
            selectedValues = selectedValues + str(selectedFocusFeatureValues[i]) + ":"

    return allValues, selectedValues
  
'''
Finds the feature and displays its responses.
'''
def findFeature(entryFeat, listFeat, dataset, *args):
        # Here is how to get the value from entryFeatA
        featCode = entryFeat
        print "Entered feature code: " + featCode
        arrTempItems = []
        found = False
        hasFocusFeature = False
        #Get proper list of features from initial variable description
        for feature in features:
            if feature['Code'] == featCode:
                found = True
                for arg in args:
                    if arg == "Dataset_Feature":
                        dataset['Feature'] = copy.deepcopy(feature)
                    if arg == "Focus_Feature":
                        dataset['Focus Feature'] = copy.deepcopy(feature)
                        hasFocusFeature = True
                for response in feature['Responses']:
                    tempResp = response['Code'] + " - " + response['Description']
                    arrTempItems.append(tempResp)
                break
        if not found:
            tkMessageBox.showerror("Error: Feature not found", "Feature not found in Variable Descriptor. Try again.")

        #Getting the proportions and frequencies of each value (including invalid values) in the focus feature
        if hasFocusFeature == True:
            arrTempItems=[]
            dataset['ColumnData']=[]
            for record in dataset['Data']:
                dataset['ColumnData'].append(record[featCode])
            c = Counter(dataset['ColumnData']) #Counts the number of occurrences of each value of the focus feature
            
            countN = len(dataset['ColumnData'])#N is the size of the dataset
            countn = 0 #n is the total number of values where their group is not -1

            notInGroupNega1 = []#List that keeps track of the values whose group is not -1
            for val in c:
                for response in dataset['Focus Feature']['Responses']:
                    if val == response['Code']:
                        if response['Group'] != '-1':
                            notInGroupNega1.append(val)
                            countn = countn + int(c[val])
                        break 
            
            for val in c:
                countP = 0
                countP = countP + int(c[val])
                print 'Value: ' + val
                print 'Frequency: ' + str(countP)
                print 'n:' + str(countn)
                print 'N:' + str(countN)

                proportionOverN = round(countP/float(countN) * 100.0 ,2)
                proportionOvern = round(countP/float(countn) * 100.0, 2)

                if val not in notInGroupNega1: #If the value is an invalid value or its group/class is -1
                    proportionOvern = proportionOvern * 0

                tempResp = str(countP) + " | " + str(proportionOverN) + "%(N) | " + str(proportionOvern) + "%(n) | "
                isValidResponse = False
                for response in dataset['Focus Feature']['Responses']:
                    if val == response['Code']:
                        isValidResponse = True
                        tempResp = tempResp + response['Group'] + " | " +  response['Code'] + " | " + response['Description']  
                        break
                if not isValidResponse:
                    tempResp = tempResp +  "-1" + " | " +   str(val) + " | " + "INVALID VALUE" 
                arrTempItems.append(tempResp)
                         
        listFeat.delete(0, END)
        for A in arrTempItems:
            listFeat.insert(END, A)
        
'''
Splits an array retrieved from a listbox based on a delimiter, and appends to a new array
which element of the split array given an index. The new array will be returned.
'''
def parseListBoxValues(raw_arr, delimiter, index):
    proc_arr = []
    for x in raw_arr:
        temp = x.split(delimiter)
        proc_arr.append(temp[index])   
    return proc_arr
'''
Selects the values of the focus feature
'''
def setFocusFeatureValues(evt, dataset, focusFeat, label):
    datasets = []
    allValues = []
    selectedValues = []

    listbox = evt.widget
    tempAV = listbox.get(0,END)
    tempSV = [listbox.get(i) for i in listbox.curselection()]
    
    allValuesRaw = parseListBoxValues(tempAV, " | ", 4)
    selectedValues = parseListBoxValues(tempSV, " | ", 4)
    
    for val in allValuesRaw:
        for response in dataset['Focus Feature']['Responses']:
            if response['Code'] == val and response['Group'] != '-1':
                allValues.append(val)
                break
    
    print str(allValues)

    dataset['Focus Feature']['All Values'] = allValues
    dataset['Focus Feature']['Selected Values'] = selectedValues
    
    datasets.append(dataset)
    svs.getTotalsAndProportions(datasets,allValues, selectedValues)
    label.configure(text = "Frequency: " + str(datasets[0]['Proportion']) + " , Proportion: " + str(round(datasets[0]['ProportionPercent']*100,2)) + "%" + ", Total: " + str(datasets[0]['Total']))

    


'''
Verifies if the focus features and their selected values for datasets 1 and 2 are the same.
'''
def isSameFocusFeat(dataset1, dataset2, selectedValD1, selectedValD2):
    print selectedValD1
    print selectedValD2 
    if(dataset1['Focus Feature'] == dataset2['Focus Feature']):
        if(np.array_equal(selectedValD1, selectedValD2)):
            return 1
        else:
            tkMessageBox.showerror('Unequal values', 'Selected values on both datasets are not equal.')
            return -1
    else:
        tkMessageBox.showerror('Unequal feature', 'Feature code on both datasets are not equal.')
        return -1


'''
Set selected dataset values for that dataset. 
'''
def selectDatasetValues(evt, dataset, populationDataset, labelFeatCount):
    global populationDir
    listbox = evt.widget
    selectedValues = [listbox.get(i) for i in listbox.curselection()]
    dataset['Feature']['Selected Responses']=[]

    for sv in selectedValues:
        responseArr = sv.split(" - ")
        for response in dataset['Feature']['Responses']:
            if response['Code'] == responseArr[0]:
                selected_response = copy.deepcopy(response)
                dataset['Feature']['Selected Responses'].append(selected_response)
    
    datasetCount = 0
    print str(len(dataset['Data']))
    for record in dataset['Data']:
        if any (response['Code'] == record[dataset['Feature']['Code']] for response in dataset['Feature']['Selected Responses']):
            datasetCount +=1

    labelFeatCount.configure(text="n: " + str(datasetCount))

def saveDatasetFile(dataset):
    fileName = makeFileName(dataset)
    writeCSVDict(fileName, dataset['Data'])
    tkMessageBox.showinfo("Dataset saved", "Dataset saved as " + fileName)


class OOTO_Miner:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x600+522+139")
        top.title("OOTO Miner")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Tabs = ttk.Notebook(top)
        self.Tabs.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.01)
        self.Tabs.configure(width=604)
        self.Tabs.configure(takefocus="")
        self.Tabs_t1 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t1, padding=3)
        self.Tabs.tab(0, text="Miner", underline="-1", )
        self.Tabs_t3 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t3, padding=3)
        self.Tabs.tab(1, text="Prober", underline="-1", )
        self.Tabs_t2 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t2, padding=3)
        self.Tabs.tab(2, text="Variable Descriptor", underline="-1", )


        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.menubar.add_command(label="About", command=self.showAbout)
        self.menubar.add_command(label="Help")


        '''
        TAB 1 - TESTS
        '''
        self.labelQueueCount = Label(self.Tabs_t1)
        self.labelQueueCount.place(relx=0.64, rely=0.86, height=33, width=210)
        self.labelQueueCount.configure(text='''Queue Count: 0''')

        self.buttonTest = Button(self.Tabs_t1)
        self.buttonTest.place(relx=0.877, rely=0.93, height=33, width=115)
        self.buttonTest.configure(activebackground="#d9d9d9")
        self.buttonTest.configure(activeforeground="#000000")
        self.buttonTest.configure(background="#d9d9d9")
        self.buttonTest.configure(disabledforeground="#a3a3a3")
        self.buttonTest.configure(foreground="#000000")
        self.buttonTest.configure(highlightbackground="#d9d9d9")
        self.buttonTest.configure(highlightcolor="black")
        self.buttonTest.configure(pady="0")
        self.buttonTest.configure(text='''Test''')
        self.buttonTest.configure(state='disabled')


        self.buttonTestQueue = Button(self.Tabs_t1)
        self.buttonTestQueue.place(relx=0.744, rely=0.93, height=33, width=115)
        self.buttonTestQueue.configure(activebackground="#d9d9d9")
        self.buttonTestQueue.configure(activeforeground="#000000")
        self.buttonTestQueue.configure(background="#d9d9d9")
        self.buttonTestQueue.configure(disabledforeground="#a3a3a3")
        self.buttonTestQueue.configure(foreground="#000000")
        self.buttonTestQueue.configure(highlightbackground="#d9d9d9")
        self.buttonTestQueue.configure(highlightcolor="black")
        self.buttonTestQueue.configure(pady="0")
        self.buttonTestQueue.configure(text='''Test Queue''')
        self.buttonTestQueue.configure(state='disabled')

        self.buttonClearQueue = Button(self.Tabs_t1)
        self.buttonClearQueue.place(relx=0.627, rely=0.93, height=33, width=115)
        self.buttonClearQueue.configure(activebackground="#d9d9d9")
        self.buttonClearQueue.configure(activeforeground="#000000")
        self.buttonClearQueue.configure(background="#d9d9d9")
        self.buttonClearQueue.configure(disabledforeground="#a3a3a3")
        self.buttonClearQueue.configure(foreground="#000000")
        self.buttonClearQueue.configure(highlightbackground="#d9d9d9")
        self.buttonClearQueue.configure(highlightcolor="black")
        self.buttonClearQueue.configure(pady="0")
        self.buttonClearQueue.configure(text='''Clear Queue''')
        self.buttonClearQueue.configure(state='disabled')

        self.buttonQueue = Button(self.Tabs_t1)
        self.buttonQueue.place(relx=0.51, rely=0.93, height=33, width=115)
        self.buttonQueue.configure(activebackground="#d9d9d9")
        self.buttonQueue.configure(activeforeground="#000000")
        self.buttonQueue.configure(background="#d9d9d9")
        self.buttonQueue.configure(disabledforeground="#a3a3a3")
        self.buttonQueue.configure(foreground="#000000")
        self.buttonQueue.configure(highlightbackground="#d9d9d9")
        self.buttonQueue.configure(highlightcolor="black")
        self.buttonQueue.configure(pady="0")
        self.buttonQueue.configure(text='''Enqueue''')
        self.buttonQueue.configure(state='disabled')

        '''
        CHANGES HERE!
        '''
        strarrTestType = ["Chi-test","Sample vs Sample","Sample vs Population"]
        self.comboBoxTestType = ttk.Combobox(self.Tabs_t1)
        self.comboBoxTestType.place(relx=0.01, rely=0.02, relheight=0.04
                , relwidth=0.49)
        self.comboBoxTestType.configure(exportselection="0")
        #self.comboBoxTestType.configure(textvariable=Mother_support.combobox)
        self.comboBoxTestType.configure(takefocus="")
        self.comboBoxTestType.configure(values=strarrTestType)
        self.comboBoxTestType.configure(state="readonly")
        # self.adjustViews()

        ''' 
        self.buttonTestType = Button(top)
        self.buttonTestType.place(relx=0.01, rely=0.07, height=23, width=486)
        self.buttonTestType.configure(activebackground="#d9d9d9")
        self.buttonTestType.configure(activeforeground="#000000")
        self.buttonTestType.configure(background="#d9d9d9")
        self.buttonTestType.configure(disabledforeground="#a3a3a3")
        self.buttonTestType.configure(foreground="#000000")
        self.buttonTestType.configure(highlightbackground="#d9d9d9")
        self.buttonTestType.configure(highlightcolor="black")
        self.buttonTestType.configure(pady="0")
        self.buttonTestType.configure(text=''Select Test'')
        '''

        self.textTestType = Label(self.Tabs_t1)
        self.textTestType.place(relx=0.01, rely=0.07, height=23, width=486)
        self.textTestType.configure(activebackground="#d9d9d9")
        self.textTestType.configure(activeforeground="#000000")
        self.textTestType.configure(background="#d9d9d9")
        self.textTestType.configure(disabledforeground="#a3a3a3")
        self.textTestType.configure(foreground="#000000")
        self.textTestType.configure(highlightbackground="#d9d9d9")
        self.textTestType.configure(highlightcolor="black")
        self.textTestType.configure(pady="0")
        self.textTestType.configure(text="WARNING: No Selected Test")

        self.entryPopulation = Entry(self.Tabs_t1)
        self.entryPopulation.place(relx=0.01, rely=0.12, relheight=0.04
                , relwidth=0.48)
        self.entryPopulation.configure(background="white")
        self.entryPopulation.configure(disabledforeground="#a3a3a3")
        self.entryPopulation.configure(font="TkFixedFont")
        self.entryPopulation.configure(foreground="#000000")
        self.entryPopulation.configure(highlightbackground="#d9d9d9")
        self.entryPopulation.configure(highlightcolor="black")
        self.entryPopulation.configure(insertbackground="black")
        self.entryPopulation.configure(selectbackground="#c4c4c4")
        self.entryPopulation.configure(selectforeground="black")
        self.entryPopulation.configure(state='normal')

        self.buttonPopulation = Button(self.Tabs_t1)
        self.buttonPopulation.place(relx=0.01, rely=0.17, height=23, width=486)
        self.buttonPopulation.configure(activebackground="#d9d9d9")
        self.buttonPopulation.configure(activeforeground="#000000")
        self.buttonPopulation.configure(background="#d9d9d9")
        self.buttonPopulation.configure(disabledforeground="#a3a3a3")
        self.buttonPopulation.configure(foreground="#000000")
        self.buttonPopulation.configure(highlightbackground="#d9d9d9")
        self.buttonPopulation.configure(highlightcolor="black")
        self.buttonPopulation.configure(pady="0")
        self.buttonPopulation.configure(text='''Upload Population''')
        self.buttonPopulation.configure(state='normal')

        self.labelFrameZTest = LabelFrame(self.Tabs_t1)
        self.labelFrameZTest.place(relx=0.51, rely=0.0, relheight=0.85
                , relwidth=0.48)
        self.labelFrameZTest.configure(relief=GROOVE)
        self.labelFrameZTest.configure(foreground="black")
        self.labelFrameZTest.configure(text='''Z -Test''')
        self.labelFrameZTest.configure(background="#d9d9d9")
        self.labelFrameZTest.configure(highlightbackground="#d9d9d9")
        self.labelFrameZTest.configure(highlightcolor="black")
        self.labelFrameZTest.configure(width=480)

        self.labelZCriticalValue = Label(self.labelFrameZTest)
        self.labelZCriticalValue.place(relx=0.02, rely=0.06, height=26
                , width=108)
        self.labelZCriticalValue.configure(activebackground="#f9f9f9")
        self.labelZCriticalValue.configure(activeforeground="black")
        self.labelZCriticalValue.configure(background="#d9d9d9")
        self.labelZCriticalValue.configure(disabledforeground="#a3a3a3")
        self.labelZCriticalValue.configure(foreground="#000000")
        self.labelZCriticalValue.configure(highlightbackground="#d9d9d9")
        self.labelZCriticalValue.configure(highlightcolor="black")
        self.labelZCriticalValue.configure(text='''Confidence Interval''')

        self.labelFeature = Label(self.labelFrameZTest)
        self.labelFeature.place(relx=0.02, rely=0.17, height=26, width=55)
        self.labelFeature.configure(activebackground="#f9f9f9")
        self.labelFeature.configure(activeforeground="black")
        self.labelFeature.configure(background="#d9d9d9")
        self.labelFeature.configure(disabledforeground="#a3a3a3")
        self.labelFeature.configure(foreground="#000000")
        self.labelFeature.configure(highlightbackground="#d9d9d9")
        self.labelFeature.configure(highlightcolor="black")
        self.labelFeature.configure(text='''Feature''')

        self.textFeature = Label(self.labelFrameZTest)
        self.textFeature.place(relx=0.17, rely=0.17, relheight=0.1, relwidth=0.8)
        self.textFeature.configure(activebackground="#d9d9d9")
        self.textFeature.configure(activeforeground="#000000")
        self.textFeature.configure(background="#d9d9d9")
        self.textFeature.configure(disabledforeground="#a3a3a3")
        self.textFeature.configure(foreground="#000000")
        self.textFeature.configure(highlightbackground="#d9d9d9")
        self.textFeature.configure(highlightcolor="black")
        self.textFeature.configure(pady="0")

        self.listAttributes = Listbox(self.labelFrameZTest)
        self.listAttributes.place(relx=0.02, rely=0.27, relheight=0.68
                , relwidth=0.95)
        self.listAttributes.configure(background="white")
        self.listAttributes.configure(disabledforeground="#a3a3a3")
        self.listAttributes.configure(exportselection="0")
        self.listAttributes.configure(font="TkFixedFont")
        self.listAttributes.configure(foreground="#000000")
        self.listAttributes.configure(highlightbackground="#d9d9d9")
        self.listAttributes.configure(highlightcolor="black")
        self.listAttributes.configure(selectbackground="#c4c4c4")
        self.listAttributes.configure(selectforeground="black")
        self.listAttributes.configure(width=454)
        self.listAttributes.configure(selectmode=MULTIPLE)
        self.listAttributes.configure(state='disabled')



        '''
        self.entryCriticalValue = Entry(self.labelFrameZTest)
        self.entryCriticalValue.place(relx=0.25, rely=0.05, relheight=0.04
                , relwidth=0.72)
        self.entryCriticalValue.configure(background="white")
        self.entryCriticalValue.configure(disabledforeground="#a3a3a3")
        self.entryCriticalValue.configure(font="TkFixedFont")
        self.entryCriticalValue.configure(foreground="#000000")
        self.entryCriticalValue.configure(highlightbackground="#d9d9d9")
        self.entryCriticalValue.configure(highlightcolor="black")
        self.entryCriticalValue.configure(insertbackground="black")
        self.entryCriticalValue.configure(selectbackground="#c4c4c4")
        self.entryCriticalValue.configure(selectforeground="black")
        '''
        

        '''
        CHANGES HERE!
        '''
        strarrCriticalValue = ["0.80", "0.90", "0.95", "0.98", "0.99"]
        self.comboCriticalValue = ttk.Combobox(self.labelFrameZTest)
        self.comboCriticalValue.place(relx=0.25, rely=0.05, relheight=0.04, relwidth=0.72)
        self.comboCriticalValue.configure(exportselection="0")
        self.comboCriticalValue.configure(takefocus="")
        self.comboCriticalValue.configure(values=strarrCriticalValue)
        self.comboCriticalValue.configure(state="disabled")
        self.comboCriticalValue.current(0)
        global criticalValue
        criticalValue = self.comboCriticalValue.get()

        self.buttonGetFeat = Button(self.labelFrameZTest)
        self.buttonGetFeat.place(relx=0.65, rely=0.11, height=23, width=156)
        self.buttonGetFeat.configure(activebackground="#d9d9d9")
        self.buttonGetFeat.configure(activeforeground="#000000")
        self.buttonGetFeat.configure(background="#d9d9d9")
        self.buttonGetFeat.configure(disabledforeground="#a3a3a3")
        self.buttonGetFeat.configure(foreground="#000000")
        self.buttonGetFeat.configure(highlightbackground="#d9d9d9")
        self.buttonGetFeat.configure(highlightcolor="black")
        self.buttonGetFeat.configure(pady="0")
        self.buttonGetFeat.configure(text='''Enter Feature Code''')
        self.buttonGetFeat.configure(width=156)
        self.buttonGetFeat.configure(state='disabled')

        '''
        self.Entry1 = Entry(self.labelFrameZTest)
        self.Entry1.place(relx=0.25, rely=0.11, relheight=0.04, relwidth=0.38)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=184)
        '''

        self.labelFrameGenerateSamples = LabelFrame(self.Tabs_t1)
        self.labelFrameGenerateSamples.place(relx=0.01, rely=0.22, relheight=0.78, relwidth=0.49)
        self.labelFrameGenerateSamples.configure(relief=GROOVE)
        self.labelFrameGenerateSamples.configure(foreground="black")
        self.labelFrameGenerateSamples.configure(text='''Generate Samples''')
        self.labelFrameGenerateSamples.configure(background="#d9d9d9")
        self.labelFrameGenerateSamples.configure(highlightbackground="#d9d9d9")
        self.labelFrameGenerateSamples.configure(highlightcolor="black")
        self.labelFrameGenerateSamples.configure(width=490)

        self.entrySample = Entry(self.labelFrameGenerateSamples)
        self.entrySample.place(relx=0.02, rely=0.05, relheight=0.05
                , relwidth=0.46)
        self.entrySample.configure(background="white")
        self.entrySample.configure(disabledforeground="#a3a3a3")
        self.entrySample.configure(font="TkFixedFont")
        self.entrySample.configure(foreground="#000000")
        self.entrySample.configure(highlightbackground="#d9d9d9")
        self.entrySample.configure(highlightcolor="black")
        self.entrySample.configure(insertbackground="black")
        self.entrySample.configure(selectbackground="#c4c4c4")
        self.entrySample.configure(selectforeground="black")
        self.entrySample.configure(state='disabled')

        self.labelSample = Label(self.labelFrameGenerateSamples)
        self.labelSample.place(relx=0.02, rely=0.11, relheight=0.05, relwidth=0.95)
        self.labelSample.configure(text='''Sample Feature: None ''')
        self.labelSample.configure(justify=LEFT)

        self.entryFocus = Entry(self.labelFrameZTest)
        self.entryFocus.place(relx=0.43, rely=0.11, relheight=0.04, relwidth=0.2)
        self.entryFocus.configure(background="white")
        self.entryFocus.configure(disabledforeground="#a3a3a3")
        self.entryFocus.configure(font="TkFixedFont")
        self.entryFocus.configure(foreground="#000000")
        self.entryFocus.configure(insertbackground="black")
        self.entryFocus.configure(width=184)
        self.entryFocus.configure(state='disabled')

        '''
        self.entryFocus.place(relx=0.51, rely=0.05, relheight=0.05
                , relwidth=0.46)
        self.entryFocus.configure(background="white")
        self.entryFocus.configure(disabledforeground="#a3a3a3")
        self.entryFocus.configure(font="TkFixedFont")
        self.entryFocus.configure(foreground="#000000")
        self.entryFocus.configure(highlightbackground="#d9d9d9")
        self.entryFocus.configure(highlightcolor="black")
        self.entryFocus.configure(insertbackground="black")
        self.entryFocus.configure(selectbackground="#c4c4c4")
        self.entryFocus.configure(selectforeground="black")
        '''

        self.buttonSample = Button(self.labelFrameGenerateSamples)
        self.buttonSample.place(relx=0.51, rely=0.05, height=23, width=226)
        self.buttonSample.configure(activebackground="#d9d9d9")
        self.buttonSample.configure(activeforeground="#000000")
        self.buttonSample.configure(background="#d9d9d9")
        self.buttonSample.configure(disabledforeground="#a3a3a3")
        self.buttonSample.configure(foreground="#000000")
        self.buttonSample.configure(highlightbackground="#d9d9d9")
        self.buttonSample.configure(highlightcolor="black")
        self.buttonSample.configure(pady="0")
        self.buttonSample.configure(text='''Enter Sample Feature''')
        self.buttonSample.configure(state='disabled')

        '''
        self.buttonFocus = Button(self.labelFrameGenerateSamples)
        self.buttonFocus.place(relx=0.51, rely=0.11, height=23, width=226)
        self.buttonFocus.configure(activebackground="#d9d9d9")
        self.buttonFocus.configure(activeforeground="#000000")
        self.buttonFocus.configure(background="#d9d9d9")
        self.buttonFocus.configure(disabledforeground="#a3a3a3")
        self.buttonFocus.configure(foreground="#000000")
        self.buttonFocus.configure(highlightbackground="#d9d9d9")
        self.buttonFocus.configure(highlightcolor="black")
        self.buttonFocus.configure(pady="0")
        self.buttonFocus.configure(text='Enter Focus Feature')
        '''

        self.buttonShowA = Button(self.labelFrameGenerateSamples)
        self.buttonShowA.place(relx=0.02, rely=0.24, height=23, width=226)
        self.buttonShowA.configure(activebackground="#d9d9d9")
        self.buttonShowA.configure(activeforeground="#000000")
        self.buttonShowA.configure(background="#d9d9d9")
        self.buttonShowA.configure(disabledforeground="#a3a3a3")
        self.buttonShowA.configure(foreground="#000000")
        self.buttonShowA.configure(highlightbackground="#d9d9d9")
        self.buttonShowA.configure(highlightcolor="black")
        self.buttonShowA.configure(pady="0")
        self.buttonShowA.configure(text='''Show Features A''')
        self.buttonShowA.configure(state='disabled')

        self.buttonShowB = Button(self.labelFrameGenerateSamples)
        self.buttonShowB.place(relx=0.51, rely=0.24, height=23, width=226)
        self.buttonShowB.configure(activebackground="#d9d9d9")
        self.buttonShowB.configure(activeforeground="#000000")
        self.buttonShowB.configure(background="#d9d9d9")
        self.buttonShowB.configure(disabledforeground="#a3a3a3")
        self.buttonShowB.configure(foreground="#000000")
        self.buttonShowB.configure(highlightbackground="#d9d9d9")
        self.buttonShowB.configure(highlightcolor="black")
        self.buttonShowB.configure(pady="0")
        self.buttonShowB.configure(text='''Show Features B''')
        self.buttonShowB.configure(state='disabled')

        self.listFeatA = Listbox(self.labelFrameGenerateSamples)
        self.listFeatA.place(relx=0.02, rely=0.41, relheight=0.48, relwidth=0.46)
        self.listFeatA.configure(background="white")
        self.listFeatA.configure(disabledforeground="#a3a3a3")
        self.listFeatA.configure(exportselection="0")
        self.listFeatA.configure(font="TkFixedFont")
        self.listFeatA.configure(foreground="#000000")
        self.listFeatA.configure(highlightbackground="#d9d9d9")
        self.listFeatA.configure(highlightcolor="black")
        self.listFeatA.configure(selectbackground="#c4c4c4")
        self.listFeatA.configure(selectforeground="black")
        self.listFeatA.configure(width=224)
        self.listFeatA.configure(selectmode=MULTIPLE)
        self.listFeatA.configure(state='disabled')

        #COUNT LABEL FOR DATASET A
        self.labelFeatACount = Label(self.labelFrameGenerateSamples)
        self.labelFeatACount.place(relx=0.02, rely=0.31, height=26, width=172)
        self.labelFeatACount.configure(background="#d9d9d9")
        self.labelFeatACount.configure(disabledforeground="#a3a3a3")
        self.labelFeatACount.configure(foreground="#000000")



        self.listFeatB = Listbox(self.labelFrameGenerateSamples)
        self.listFeatB.place(relx=0.51, rely=0.41, relheight=0.48, relwidth=0.46)
        self.listFeatB.configure(background="white")
        self.listFeatB.configure(disabledforeground="#a3a3a3")
        self.listFeatB.configure(exportselection="0")
        self.listFeatB.configure(font="TkFixedFont")
        self.listFeatB.configure(foreground="#000000")
        self.listFeatB.configure(highlightbackground="#d9d9d9")
        self.listFeatB.configure(highlightcolor="black")
        self.listFeatB.configure(selectbackground="#c4c4c4")
        self.listFeatB.configure(selectforeground="black")
        self.listFeatB.configure(width=224)
        self.listFeatB.configure(selectmode=MULTIPLE)
        self.listFeatB.configure(state='disabled')

        # COUNT LABEL FOR DATASET B
        self.labelFeatBCount = Label(self.labelFrameGenerateSamples)
        self.labelFeatBCount.place(relx=0.51, rely=0.31, height=26, width=172)
        self.labelFeatBCount.configure(background="#d9d9d9")
        self.labelFeatBCount.configure(disabledforeground="#a3a3a3")
        self.labelFeatBCount.configure(foreground="#000000")

        
        self.buttonSaveDatasets = Button(self.labelFrameGenerateSamples)
        self.buttonSaveDatasets.place(relx=0.02, rely=0.91, height=33, width=466)

        self.buttonSaveDatasets.configure(activebackground="#d9d9d9")
        self.buttonSaveDatasets.configure(activeforeground="#000000")
        self.buttonSaveDatasets.configure(background="#d9d9d9")
        self.buttonSaveDatasets.configure(disabledforeground="#a3a3a3")
        self.buttonSaveDatasets.configure(foreground="#000000")
        self.buttonSaveDatasets.configure(highlightbackground="#d9d9d9")
        self.buttonSaveDatasets.configure(highlightcolor="black")
        self.buttonSaveDatasets.configure(pady="0")
        self.buttonSaveDatasets.configure(text='Save Datasets')
        self.buttonSaveDatasets.configure(state='disabled')
        

        self.entryFeatA = Entry(self.labelFrameGenerateSamples)
        self.entryFeatA.place(relx=0.02, rely=0.17, relheight=0.05
                , relwidth=0.46)
        self.entryFeatA.configure(background="white")
        self.entryFeatA.configure(disabledforeground="#a3a3a3")
        self.entryFeatA.configure(font="TkFixedFont")
        self.entryFeatA.configure(foreground="#000000")
        self.entryFeatA.configure(highlightbackground="#d9d9d9")
        self.entryFeatA.configure(highlightcolor="black")
        self.entryFeatA.configure(insertbackground="black")
        self.entryFeatA.configure(selectbackground="#c4c4c4")
        self.entryFeatA.configure(selectforeground="black")
        self.entryFeatA.configure(state='disabled')

        self.entryFeatB = Entry(self.labelFrameGenerateSamples)
        self.entryFeatB.place(relx=0.51, rely=0.17, relheight=0.05
                , relwidth=0.46)
        self.entryFeatB.configure(background="white")
        self.entryFeatB.configure(disabledforeground="#a3a3a3")
        self.entryFeatB.configure(font="TkFixedFont")
        self.entryFeatB.configure(foreground="#000000")
        self.entryFeatB.configure(highlightbackground="#d9d9d9")
        self.entryFeatB.configure(highlightcolor="black")
        self.entryFeatB.configure(insertbackground="black")
        self.entryFeatB.configure(selectbackground="#c4c4c4")
        self.entryFeatB.configure(selectforeground="black")
        self.entryFeatB.configure(state='disabled')
        '''
        BINDING ELEMENTS FOR TAB 1
        notes: bind the functions as objects ( ie. setPopulation not setPopulation() )
        <Button-1> On left click
        <<ComboboxSelected>> On select in ComboBox
        CHANGES HERE!
        '''

        self.buttonPopulation.bind('<Button-1>', self.setPopulation)
        self.buttonSample.bind('<Button-1>', self.setSample)
        self.buttonShowA.bind('<Button-1>', self.setFeatA)
        self.buttonShowB.bind('<Button-1>', self.setFeatB)
        self.buttonSaveDatasets.bind('<Button-1>', self.saveDataset)
        self.buttonGetFeat.bind('<Button-1>', self.getFeat)
        self.buttonTest.bind('<Button-1>', self.test)
        self.buttonQueue.bind('<Button-1>', self.queue)
        self.buttonClearQueue.bind('<Button-1>', self.clearQueue)
        self.buttonTestQueue.bind('<Button-1>', self.testQueue)
        

        self.comboBoxTestType.bind('<<ComboboxSelected>>', self.setTest)

        self.comboCriticalValue.bind('<<ComboboxSelected>>', self.getCriticalValue)

        self.listFeatA.bind('<<ListboxSelect>>', self.selectValuesDatasetA)
        self.listFeatB.bind('<<ListboxSelect>>', self.selectValuesDatasetB)
        self.listAttributes.bind('<<ListboxSelect>>', self.selectFocusFeatureValues)



        '''
        TAB 2 - PREPROCESSOR
        '''

        self.labelFrameVariableDescriptor = LabelFrame(self.Tabs_t2)
        self.labelFrameVariableDescriptor.place(relx=0.01, rely=0.0
                                                , relheight=0.19, relwidth=0.98)
        self.labelFrameVariableDescriptor.configure(relief=GROOVE)
        self.labelFrameVariableDescriptor.configure(foreground="black")
        self.labelFrameVariableDescriptor.configure(text='''Variable Descriptor''')
        self.labelFrameVariableDescriptor.configure(background="#d9d9d9")
        self.labelFrameVariableDescriptor.configure(width=980)

        self.labelVariableFile = Label(self.labelFrameVariableDescriptor)
        self.labelVariableFile.place(relx=0.01, rely=0.17, height=26, width=172)
        self.labelVariableFile.configure(background="#d9d9d9")
        self.labelVariableFile.configure(disabledforeground="#a3a3a3")
        self.labelVariableFile.configure(foreground="#000000")
        self.labelVariableFile.configure(text='''Variable File:''')
        self.labelVariableFile.configure(width=172)

        self.entryVariableFile = Entry(self.labelFrameVariableDescriptor)
        self.entryVariableFile.place(relx=0.19, rely=0.17, relheight=0.21
                                     , relwidth=0.64)
        self.entryVariableFile.configure(background="white")
        self.entryVariableFile.configure(disabledforeground="#a3a3a3")
        self.entryVariableFile.configure(font="TkFixedFont")
        self.entryVariableFile.configure(foreground="#000000")
        self.entryVariableFile.configure(insertbackground="black")
        self.entryVariableFile.configure(width=624)

        self.buttonVariableFile = Button(self.labelFrameVariableDescriptor)
        self.buttonVariableFile.place(relx=0.84, rely=0.17, height=23, width=146)

        self.buttonVariableFile.configure(activebackground="#d9d9d9")
        self.buttonVariableFile.configure(activeforeground="#000000")
        self.buttonVariableFile.configure(background="#d9d9d9")
        self.buttonVariableFile.configure(disabledforeground="#a3a3a3")
        self.buttonVariableFile.configure(foreground="#000000")
        self.buttonVariableFile.configure(highlightbackground="#d9d9d9")
        self.buttonVariableFile.configure(highlightcolor="black")
        self.buttonVariableFile.configure(pady="0")
        self.buttonVariableFile.configure(text='''Choose File...''')
        self.buttonVariableFile.configure(width=146)

        self.labelValuesFile = Label(self.labelFrameVariableDescriptor)
        self.labelValuesFile.place(relx=0.01, rely=0.43, height=26, width=172)
        self.labelValuesFile.configure(background="#d9d9d9")
        self.labelValuesFile.configure(disabledforeground="#a3a3a3")
        self.labelValuesFile.configure(foreground="#000000")
        self.labelValuesFile.configure(text='''Values File:''')
        self.labelValuesFile.configure(width=172)

        self.entryValuesFile = Entry(self.labelFrameVariableDescriptor)
        self.entryValuesFile.place(relx=0.19, rely=0.43, relheight=0.21
                                   , relwidth=0.64)
        self.entryValuesFile.configure(background="white")
        self.entryValuesFile.configure(disabledforeground="#a3a3a3")
        self.entryValuesFile.configure(font="TkFixedFont")
        self.entryValuesFile.configure(foreground="#000000")
        self.entryValuesFile.configure(insertbackground="black")
        self.entryValuesFile.configure(width=624)

        self.buttonValuesFile = Button(self.labelFrameVariableDescriptor)
        self.buttonValuesFile.place(relx=0.84, rely=0.43, height=23, width=146)
        self.buttonValuesFile.configure(activebackground="#d9d9d9")
        self.buttonValuesFile.configure(activeforeground="#000000")
        self.buttonValuesFile.configure(background="#d9d9d9")
        self.buttonValuesFile.configure(disabledforeground="#a3a3a3")
        self.buttonValuesFile.configure(foreground="#000000")
        self.buttonValuesFile.configure(highlightbackground="#d9d9d9")
        self.buttonValuesFile.configure(highlightcolor="black")
        self.buttonValuesFile.configure(pady="0")
        self.buttonValuesFile.configure(text='''Choose File...''')
        self.buttonValuesFile.configure(width=146)

        self.buttonStartVariableDescriptor = Button(self.labelFrameVariableDescriptor)
        self.buttonStartVariableDescriptor.place(relx=0.84, rely=0.7, height=23
                                                 , width=146)
        self.buttonStartVariableDescriptor.configure(activebackground="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(activeforeground="#000000")
        self.buttonStartVariableDescriptor.configure(background="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(disabledforeground="#a3a3a3")
        self.buttonStartVariableDescriptor.configure(foreground="#000000")
        self.buttonStartVariableDescriptor.configure(highlightbackground="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(highlightcolor="black")
        self.buttonStartVariableDescriptor.configure(pady="0")
        self.buttonStartVariableDescriptor.configure(text='''Start''')
        self.buttonStartVariableDescriptor.configure(width=146)

        self.entryInitialVarDesc = Entry(self.Tabs_t2)
        self.entryInitialVarDesc.place(relx=0.19, rely=0.25, relheight=0.04
                                   , relwidth=0.64)
        self.entryInitialVarDesc.configure(background="white")
        self.entryInitialVarDesc.configure(disabledforeground="#a3a3a3")
        self.entryInitialVarDesc.configure(font="TkFixedFont")
        self.entryInitialVarDesc.configure(foreground="#000000")
        self.entryInitialVarDesc.configure(insertbackground="black")
        self.entryInitialVarDesc.configure(width=624)

        self.buttonInitialVarDesc = Button(self.Tabs_t2)
        self.buttonInitialVarDesc.place(relx=0.84, rely=0.25, height=23
                                                 , width=146)
        self.buttonInitialVarDesc.configure(activebackground="#d9d9d9")
        self.buttonInitialVarDesc.configure(activeforeground="#000000")
        self.buttonInitialVarDesc.configure(background="#d9d9d9")
        self.buttonInitialVarDesc.configure(disabledforeground="#a3a3a3")
        self.buttonInitialVarDesc.configure(foreground="#000000")
        self.buttonInitialVarDesc.configure(highlightbackground="#d9d9d9")
        self.buttonInitialVarDesc.configure(highlightcolor="black")
        self.buttonInitialVarDesc.configure(pady="0")
        self.buttonInitialVarDesc.configure(text='''Upload''')
        self.buttonInitialVarDesc.configure(width=146)

        self.labelInitialVarDesc = Label(self.Tabs_t2)
        self.labelInitialVarDesc.place(relx=0.01, rely=0.2, height=26, width=250)
        self.labelInitialVarDesc.configure(background="#d9d9d9")
        self.labelInitialVarDesc.configure(disabledforeground="#a3a3a3")
        self.labelInitialVarDesc.configure(foreground="#000000")
        self.labelInitialVarDesc.configure(text='''Upload Initial Variable Description:''')
        self.labelInitialVarDesc.configure(width=172)



        '''
        BINDING PREPROCESSOR ELEMENTS
        '''
        self.buttonStartVariableDescriptor.bind('<Button-1>', self.makeInitialVarDesc)
        self.buttonVariableFile.bind('<Button-1>', self.getVariableFile)
        self.buttonValuesFile.bind('<Button-1>', self.getValuesFile)

        self.buttonInitialVarDesc.bind('<Button-1>', self.uploadInitVarDesc)



        '''
        TAB 3 - QUERY
        '''

        self.entryQueryPopulation = Entry(self.Tabs_t3)
        self.entryQueryPopulation.place(relx=0.155, rely=0.02, relheight=0.04
                                        , relwidth=0.51)
        self.entryQueryPopulation.configure(background="white")
        self.entryQueryPopulation.configure(disabledforeground="#a3a3a3")
        self.entryQueryPopulation.configure(font="TkFixedFont")
        self.entryQueryPopulation.configure(foreground="#000000")
        self.entryQueryPopulation.configure(insertbackground="black")
        self.entryQueryPopulation.configure(width=654)

        self.buttonQueryPopulation = Button(self.Tabs_t3)
        self.buttonQueryPopulation.place(relx=0.67, rely=0.02, height=23
                                         , width=316)
        self.buttonQueryPopulation.configure(activebackground="#d9d9d9")
        self.buttonQueryPopulation.configure(activeforeground="#000000")
        self.buttonQueryPopulation.configure(background="#d9d9d9")
        self.buttonQueryPopulation.configure(disabledforeground="#a3a3a3")
        self.buttonQueryPopulation.configure(foreground="#000000")
        self.buttonQueryPopulation.configure(highlightbackground="#d9d9d9")
        self.buttonQueryPopulation.configure(highlightcolor="black")
        self.buttonQueryPopulation.configure(pady="0")
        self.buttonQueryPopulation.configure(text='''Upload Population''')
        self.buttonQueryPopulation.configure(width=316)

        self.labelFrameQueryDataA = LabelFrame(self.Tabs_t3)
        self.labelFrameQueryDataA.place(relx=0.01, rely=0.07, relheight=0.88
                                        , relwidth=0.48)
        self.labelFrameQueryDataA.configure(relief=GROOVE)
        self.labelFrameQueryDataA.configure(foreground="black")
        self.labelFrameQueryDataA.configure(text='''Dataset A''')
        self.labelFrameQueryDataA.configure(background="#d9d9d9")
        self.labelFrameQueryDataA.configure(width=480)
        global queryStrFilterB

        self.entryQuerySetDataA = Entry(self.labelFrameQueryDataA)
        self.entryQuerySetDataA.place(relx=0.02, rely=0.04, relheight=0.05
                                       , relwidth=0.2)
        self.entryQuerySetDataA.configure(background="white")
        self.entryQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.entryQuerySetDataA.configure(font="TkFixedFont")
        self.entryQuerySetDataA.configure(foreground="#000000")
        self.entryQuerySetDataA.configure(insertbackground="black")
        self.entryQuerySetDataA.configure(width=94)

        self.buttonQuerySetDataA = Button(self.labelFrameQueryDataA)
        self.buttonQuerySetDataA.place(relx=0.02, rely=0.1, height=23, width=96)
        self.buttonQuerySetDataA.configure(activebackground="#d9d9d9")
        self.buttonQuerySetDataA.configure(activeforeground="#000000")
        self.buttonQuerySetDataA.configure(background="#d9d9d9")
        self.buttonQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySetDataA.configure(foreground="#000000")
        self.buttonQuerySetDataA.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySetDataA.configure(highlightcolor="black")
        self.buttonQuerySetDataA.configure(pady="0")
        self.buttonQuerySetDataA.configure(text='''Set Data''')
        self.buttonQuerySetDataA.configure(width=96)

        self.listQuerySetDataA = Listbox(self.labelFrameQueryDataA)
        self.listQuerySetDataA.place(relx=0.23, rely=0.04, relheight=0.26
                                     , relwidth=0.76)
        self.listQuerySetDataA.configure(background="white")
        self.listQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.listQuerySetDataA.configure(font="TkFixedFont")
        self.listQuerySetDataA.configure(foreground="#000000")
        self.listQuerySetDataA.configure(width=364)
        self.listQuerySetDataA.configure(selectmode=MULTIPLE)
        self.listQuerySetDataA.configure(exportselection="0")
        self.listQuerySetDataA.configure(highlightbackground="#d9d9d9")
        self.listQuerySetDataA.configure(highlightcolor="black")
        self.listQuerySetDataA.configure(selectbackground="#c4c4c4")
        self.listQuerySetDataA.configure(selectforeground="black")

        self.buttonQueryAddFilterA = Button(self.labelFrameQueryDataA)
        self.buttonQueryAddFilterA.place(relx=0.02, rely=0.15, height=23, width=96)
        self.buttonQueryAddFilterA.configure(activebackground="#d9d9d9")
        self.buttonQueryAddFilterA.configure(activeforeground="#000000")
        self.buttonQueryAddFilterA.configure(background="#d9d9d9")
        self.buttonQueryAddFilterA.configure(disabledforeground="#a3a3a3")
        self.buttonQueryAddFilterA.configure(foreground="#000000")
        self.buttonQueryAddFilterA.configure(highlightbackground="#d9d9d9")
        self.buttonQueryAddFilterA.configure(highlightcolor="black")
        self.buttonQueryAddFilterA.configure(pady="0")
        self.buttonQueryAddFilterA.configure(text='''Add Filter''')
        self.buttonQueryAddFilterA.configure(width=96)

        self.buttonQueryResetFilterA = Button(self.labelFrameQueryDataA)
        self.buttonQueryResetFilterA.place(relx=0.02, rely=0.20, height=23, width=96)
        self.buttonQueryResetFilterA.configure(activebackground="#d9d9d9")
        self.buttonQueryResetFilterA.configure(activeforeground="#000000")
        self.buttonQueryResetFilterA.configure(background="#d9d9d9")
        self.buttonQueryResetFilterA.configure(disabledforeground="#a3a3a3")
        self.buttonQueryResetFilterA.configure(foreground="#000000")
        self.buttonQueryResetFilterA.configure(highlightbackground="#d9d9d9")
        self.buttonQueryResetFilterA.configure(highlightcolor="black")
        self.buttonQueryResetFilterA.configure(pady="0")
        self.buttonQueryResetFilterA.configure(text='''Reset Filters''')
        self.buttonQueryResetFilterA.configure(width=96)

        self.labelQueryDataACount = Label(self.labelFrameQueryDataA)
        self.labelQueryDataACount.place(relx=0.02, rely=0.25, height=23, width=96)
        self.labelQueryDataACount.configure(text='Count: ')

        self.entryQueryFeatureA = Entry(self.labelFrameQueryDataA)
        self.entryQueryFeatureA.place(relx=0.02, rely=0.32, relheight=0.05
                                      , relwidth=0.76)
        self.entryQueryFeatureA.configure(background="white")
        self.entryQueryFeatureA.configure(disabledforeground="#a3a3a3")
        self.entryQueryFeatureA.configure(font="TkFixedFont")
        self.entryQueryFeatureA.configure(foreground="#000000")
        self.entryQueryFeatureA.configure(insertbackground="black")
        self.entryQueryFeatureA.configure(width=364)

        self.buttonQueryFeatureA = Button(self.labelFrameQueryDataA)
        self.buttonQueryFeatureA.place(relx=0.79, rely=0.32, height=23, width=96)

        self.buttonQueryFeatureA.configure(activebackground="#d9d9d9")
        self.buttonQueryFeatureA.configure(activeforeground="#000000")
        self.buttonQueryFeatureA.configure(background="#d9d9d9")
        self.buttonQueryFeatureA.configure(disabledforeground="#a3a3a3")
        self.buttonQueryFeatureA.configure(foreground="#000000")
        self.buttonQueryFeatureA.configure(highlightbackground="#d9d9d9")
        self.buttonQueryFeatureA.configure(highlightcolor="black")
        self.buttonQueryFeatureA.configure(pady="0")
        self.buttonQueryFeatureA.configure(text='''Enter Code''')
        self.buttonQueryFeatureA.configure(width=96)



        self.listQueryDataA = Listbox(self.labelFrameQueryDataA)
        self.listQueryDataA.place(relx=0.02, rely=0.38, relheight=0.53
                                       , relwidth=0.76)
        self.listQueryDataA.configure(background="white")
        self.listQueryDataA.configure(disabledforeground="#a3a3a3")
        self.listQueryDataA.configure(font="TkFixedFont")
        self.listQueryDataA.configure(foreground="#000000")
        self.listQueryDataA.configure(width=364)
        self.listQueryDataA.configure(selectmode=MULTIPLE)
        self.listQueryDataA.configure(exportselection="0")
        self.listQueryDataA.configure(highlightbackground="#d9d9d9")
        self.listQueryDataA.configure(highlightcolor="black")
        self.listQueryDataA.configure(selectbackground="#c4c4c4")
        self.listQueryDataA.configure(selectforeground="black")

        self.labelQueryDataA = Label(self.labelFrameQueryDataA)
        self.labelQueryDataA.place(relx=0.02, rely=0.91, height=26, width=462)
        self.labelQueryDataA.configure(background="#d9d9d9")
        self.labelQueryDataA.configure(disabledforeground="#a3a3a3")
        self.labelQueryDataA.configure(foreground="#000000")
        self.labelQueryDataA.configure(text='''Label''')
        self.labelQueryDataA.configure(width=462)

        self.labelFrameQueryDataB = LabelFrame(self.Tabs_t3)
        self.labelFrameQueryDataB.place(relx=0.5, rely=0.07, relheight=0.88
                                        , relwidth=0.48)
        self.labelFrameQueryDataB.configure(relief=GROOVE)
        self.labelFrameQueryDataB.configure(foreground="black")
        self.labelFrameQueryDataB.configure(text='''Dataset B''')
        self.labelFrameQueryDataB.configure(background="#d9d9d9")
        self.labelFrameQueryDataB.configure(width=480)
        global queryStrFilterA

        self.entryQuerySetDataB = Entry(self.labelFrameQueryDataB)
        self.entryQuerySetDataB.place(relx=0.02, rely=0.04, relheight=0.05
                                      , relwidth=0.2)
        self.entryQuerySetDataB.configure(background="white")
        self.entryQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.entryQuerySetDataB.configure(font="TkFixedFont")
        self.entryQuerySetDataB.configure(foreground="#000000")
        self.entryQuerySetDataB.configure(insertbackground="black")
        self.entryQuerySetDataB.configure(width=94)

        self.buttonQuerySetDataB = Button(self.labelFrameQueryDataB)
        self.buttonQuerySetDataB.place(relx=0.02, rely=0.1, height=23, width=96)
        self.buttonQuerySetDataB.configure(activebackground="#d9d9d9")
        self.buttonQuerySetDataB.configure(activeforeground="#000000")
        self.buttonQuerySetDataB.configure(background="#d9d9d9")
        self.buttonQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySetDataB.configure(foreground="#000000")
        self.buttonQuerySetDataB.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySetDataB.configure(highlightcolor="black")
        self.buttonQuerySetDataB.configure(pady="0")
        self.buttonQuerySetDataB.configure(text='''Set Data''')
        self.buttonQuerySetDataB.configure(width=96)

        self.listQuerySetDataB = Listbox(self.labelFrameQueryDataB)
        self.listQuerySetDataB.place(relx=0.23, rely=0.04, relheight=0.26
                                     , relwidth=0.76)
        self.listQuerySetDataB.configure(background="white")
        self.listQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.listQuerySetDataB.configure(font="TkFixedFont")
        self.listQuerySetDataB.configure(foreground="#000000")
        self.listQuerySetDataB.configure(width=364)
        self.listQuerySetDataB.configure(selectmode=MULTIPLE)
        self.listQuerySetDataB.configure(exportselection="0")
        self.listQuerySetDataB.configure(highlightbackground="#d9d9d9")
        self.listQuerySetDataB.configure(highlightcolor="black")
        self.listQuerySetDataB.configure(selectbackground="#c4c4c4")
        self.listQuerySetDataB.configure(selectforeground="black")

        self.buttonQueryAddFilterB = Button(self.labelFrameQueryDataB)
        self.buttonQueryAddFilterB.place(relx=0.02, rely=0.15, height=23, width=96)
        self.buttonQueryAddFilterB.configure(activebackground="#d9d9d9")
        self.buttonQueryAddFilterB.configure(activeforeground="#000000")
        self.buttonQueryAddFilterB.configure(background="#d9d9d9")
        self.buttonQueryAddFilterB.configure(disabledforeground="#a3a3a3")
        self.buttonQueryAddFilterB.configure(foreground="#000000")
        self.buttonQueryAddFilterB.configure(highlightbackground="#d9d9d9")
        self.buttonQueryAddFilterB.configure(highlightcolor="black")
        self.buttonQueryAddFilterB.configure(pady="0")
        self.buttonQueryAddFilterB.configure(text='''Add Filter''')
        self.buttonQueryAddFilterB.configure(width=96)

        self.buttonQueryResetFilterB = Button(self.labelFrameQueryDataB)
        self.buttonQueryResetFilterB.place(relx=0.02, rely=0.20, height=23, width=96)
        self.buttonQueryResetFilterB.configure(activebackground="#d9d9d9")
        self.buttonQueryResetFilterB.configure(activeforeground="#000000")
        self.buttonQueryResetFilterB.configure(background="#d9d9d9")
        self.buttonQueryResetFilterB.configure(disabledforeground="#a3a3a3")
        self.buttonQueryResetFilterB.configure(foreground="#000000")
        self.buttonQueryResetFilterB.configure(highlightbackground="#d9d9d9")
        self.buttonQueryResetFilterB.configure(highlightcolor="black")
        self.buttonQueryResetFilterB.configure(pady="0")
        self.buttonQueryResetFilterB.configure(text='''Reset Filters''')

        self.labelQueryDataBCount = Label(self.labelFrameQueryDataB)
        self.labelQueryDataBCount.place(relx=0.02, rely=0.25, height=23, width=96)
        self.labelQueryDataBCount.configure(text='Count: ')

        self.entryQueryFeatureB = Entry(self.labelFrameQueryDataB)
        self.entryQueryFeatureB.place(relx=0.02, rely=0.32, relheight=0.05
                                      , relwidth=0.76)
        self.entryQueryFeatureB.configure(background="white")
        self.entryQueryFeatureB.configure(disabledforeground="#a3a3a3")
        self.entryQueryFeatureB.configure(font="TkFixedFont")
        self.entryQueryFeatureB.configure(foreground="#000000")
        self.entryQueryFeatureB.configure(insertbackground="black")
        self.entryQueryFeatureB.configure(width=364)

        self.buttonQueryFeatureB = Button(self.labelFrameQueryDataB)
        self.buttonQueryFeatureB.place(relx=0.79, rely=0.32, height=23, width=96)

        self.buttonQueryFeatureB.configure(activebackground="#d9d9d9")
        self.buttonQueryFeatureB.configure(activeforeground="#000000")
        self.buttonQueryFeatureB.configure(background="#d9d9d9")
        self.buttonQueryFeatureB.configure(disabledforeground="#a3a3a3")
        self.buttonQueryFeatureB.configure(foreground="#000000")
        self.buttonQueryFeatureB.configure(highlightbackground="#d9d9d9")
        self.buttonQueryFeatureB.configure(highlightcolor="black")
        self.buttonQueryFeatureB.configure(pady="0")
        self.buttonQueryFeatureB.configure(text='''Enter Code''')
        self.buttonQueryFeatureB.configure(width=96)

        self.listQueryDataB = Listbox(self.labelFrameQueryDataB)
        self.listQueryDataB.place(relx=0.02, rely=0.38, relheight=0.53
                                       , relwidth=0.76)
        self.listQueryDataB.configure(background="white")
        self.listQueryDataB.configure(disabledforeground="#a3a3a3")
        self.listQueryDataB.configure(font="TkFixedFont")
        self.listQueryDataB.configure(foreground="#000000")
        self.listQueryDataB.configure(width=364)
        self.listQueryDataB.configure(selectmode=MULTIPLE)
        self.listQueryDataB.configure(exportselection="0")
        self.listQueryDataB.configure(highlightbackground="#d9d9d9")
        self.listQueryDataB.configure(highlightcolor="black")
        self.listQueryDataB.configure(selectbackground="#c4c4c4")
        self.listQueryDataB.configure(selectforeground="black")

        self.labelQueryDataB = Label(self.labelFrameQueryDataB)
        self.labelQueryDataB.place(relx=0.02, rely=0.91, height=26, width=462)
        self.labelQueryDataB.configure(background="#d9d9d9")
        self.labelQueryDataB.configure(disabledforeground="#a3a3a3")
        self.labelQueryDataB.configure(foreground="#000000")
        self.labelQueryDataB.configure(text='''Label''')
        self.labelQueryDataB.configure(width=462)

        self.labelQueryZTest = Label(self.Tabs_t3)
        self.labelQueryZTest.place(relx=0.12, rely=0.95, height=26, width=862)
        self.labelQueryZTest.configure(background="#d9d9d9")
        self.labelQueryZTest.configure(disabledforeground="#a3a3a3")
        self.labelQueryZTest.configure(foreground="#000000")
        self.labelQueryZTest.configure(text='''Label''')
        self.labelQueryZTest.configure(width=862)

        self.buttonQueryZTest = Button(self.Tabs_t3)
        self.buttonQueryZTest.place(relx=0.01, rely=0.95, height=23, width=106)
        self.buttonQueryZTest.configure(activebackground="#d9d9d9")
        self.buttonQueryZTest.configure(activeforeground="#000000")
        self.buttonQueryZTest.configure(background="#d9d9d9")
        self.buttonQueryZTest.configure(disabledforeground="#a3a3a3")
        self.buttonQueryZTest.configure(foreground="#000000")
        self.buttonQueryZTest.configure(highlightbackground="#d9d9d9")
        self.buttonQueryZTest.configure(highlightcolor="black")
        self.buttonQueryZTest.configure(pady="0")
        self.buttonQueryZTest.configure(text='''Test''')
        self.buttonQueryZTest.configure(width=106)

        strarrQueryClass = ["-1"]
        self.comboQueryClass = ttk.Combobox(self.Tabs_t3)
        self.comboQueryClass.place(relx=0.18, rely=0.95, height=23, width=58)
        self.comboQueryClass.configure(exportselection="0")
        self.comboQueryClass.configure(takefocus="")
        self.comboQueryClass.configure(values=strarrQueryClass)
        #self.comboQueryClass.configure()
        self.comboQueryClass.current(0)

        global arrQueryCriticalValue
        arrQueryCriticalValue = ["0.80", "0.90", "0.95", "0.98", "0.99"]

        global arrQueryCriticalValueMapping
        arrQueryCriticalValueMapping = {"0.80":1.28, "0.90":1.645, "0.95":1.96, "0.98":2.33, "0.99":2.58}

        self.comboQueryCriticalValue = ttk.Combobox(self.Tabs_t3)
        self.comboQueryCriticalValue.place(relx=0.12, rely=0.95, height=23, width=58)
        self.comboQueryCriticalValue.configure(exportselection="0")
        self.comboQueryCriticalValue.configure(takefocus="")
        self.comboQueryCriticalValue.configure(values=arrQueryCriticalValue)
        self.comboQueryCriticalValue.current(0)

        '''
        BINDING FOR QUERY TAB
        '''

        self.buttonQueryPopulation.bind('<Button-1>', self.querySetPopulation)
        self.buttonQuerySetDataA.bind('<Button-1>', self.querySetDataA)
        self.buttonQuerySetDataB.bind('<Button-1>', self.querySetDataB)
        self.buttonQueryAddFilterA.bind('<Button-1>', self.queryAddFilterA)
        self.buttonQueryAddFilterB.bind('<Button-1>', self.queryAddFilterB)
        self.buttonQueryFeatureA.bind('<Button-1>', self.querySetFeatureA)
        self.buttonQueryFeatureB.bind('<Button-1>', self.querySetFeatureB)
        self.buttonQueryZTest.bind('<Button-1>', self.queryZTest)

        self.listQuerySetDataA.bind('<<ListboxSelect>>', self.querySelectDataValuesA)
        self.listQuerySetDataB.bind('<<ListboxSelect>>', self.querySelectDataValuesB)

        
        self.listQueryDataA.bind('<<ListboxSelect>>', self.setFocusFeatureValuesA)
        self.listQueryDataB.bind('<<ListboxSelect>>', self.setFocusFeatureValuesB)
        

        #######################################3

        global testType
        testType = ''
        global sampleFeature
        global selectedFocusFeature
        global allValues
        global selectedFocusFeatureValues 

        global populationDir
        global Za
        Za = 1.27
        populationDir = ""
        self.populationDataset = []
        self.datasetA = {'Data':[], 'Filter Features':[]}
        self.datasetB = {'Data':[], 'Filter Features':[]}

        global tests
        tests = []

        self.labelFeatACount.configure(text="Dataset Count: " + str(len(self.datasetA['Data'])))
        self.labelFeatBCount.configure(text="Dataset Count: " + str(len(self.datasetB['Data']))) 

        

    '''
    Functions to be called by the bound commands
    '''
    #Adds test to the queue
    def addToQueue(self, testType, **params):
        global tests
        test = {'Type':testType}
        for key in params:
            if(key == 'popDirArg'):
                test['Population Path'] = copy.copy(params[key])
            elif(key == 'sampleFeatArg'):
                test['Sample Feature'] = copy.copy(params[key])
            elif(key == 'selectedFeatArg'):
                test['Selected Feature'] = copy.copy(params[key])
            elif(key == 'allValArg'):
                test['SF All Values'] = copy.copy(params[key])
            elif(key == 'selValArg'):
                test['SF Selected Values'] = copy.copy(params[key])
            elif(key == 'datasetArgs'):
                test['Datasets'] = copy.deepcopy(params[key])
            elif(key == 'zArg'):
                test['Z Critical Value'] = copy.copy(params[key])
        tests.append(test)
        self.labelQueueCount.configure(text='Queue Count: ' + str(len(tests)))
        tkMessageBox.showinfo("Test queued", test['Type'] + " has been queued.")


    '''
    DEFINING BOUND COMMANDS
    '''
    #Create the Initial Variable Descriptor
    def makeInitialVarDesc(self):
        varFileDir = self.entryVariableFile.get()
        valFileDir = self.entryValuesFile.get()
        print 'Make the Initial Variable Descriptor! (WIP)'
    
    def getVariableFile(self):
        varFileDir = askopenfilename(title = "Select variable file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryVariableFile.delete(0, END)
        self.entryVariableFile.insert(0, varFileDir)
    
    def getValuesFile(self):
        valFileDir = askopenfilename(title = "Select values file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryValuesFile.delete(0,END)
        self.entryValuesFile.insert(0, valFileDir)

    # ABOUT US
    def showAbout(self):
        strAbout = "OTOO Miner v4.0\n" \
                   "by TE3D House\n" \
                   "De La Salle University - Laguna"
        tkMessageBox.showinfo("About", strAbout)


    # UPLOAD MODULE
    def setPopulation(self, evt):
        global populationDir
        populationDir = askopenfilename(title = "Select file",filetypes = (("csv files","*.csv"),("all files","*.*")))
        self.entryPopulation.delete(0, END)
        self.entryPopulation.insert(0, populationDir)

        self.entryQueryPopulation.delete(0,END)
        self.entryQueryPopulation.insert(0,populationDir)

        self.buttonPopulation.configure(state='normal')
        self.populationDataset = readCSVDict(populationDir)

        if(len(list(self.populationDataset)) > 0):
            tkMessageBox.showinfo("Population set", "Population dataset uploaded")
            self.populationDataset = readCSVDict(populationDir)
            for record in self.populationDataset:
                self.datasetA['Data'].append(record)
                self.datasetB['Data'].append(record)
            print len(self.datasetA['Data'])
        else:
            tkMessageBox.showerror("Upload error", "Error uploading population dataset. Please try again.")
    
    def selectValuesDatasetA(self, evt):
        selectDatasetValues(evt, self.datasetA, self.populationDataset, self.labelFeatACount)

        
    def selectFocusFeatureValues(self, evt):
        global selectedFocusFeatureValues
        listbox = evt.widget
        selectedValues = [listbox.get(i) for i in listbox.curselection()]
        selectedFocusFeatureValues = []
        for sv in selectedValues:
            valueArr = sv.split(" - ")
            selectedFocusFeatureValues.append(valueArr[0])
        

    def selectValuesDatasetB(self, evt):
        selectDatasetValues(evt, self.datasetB, self.populationDataset, self.labelFeatBCount)

    
    # SET FEATURES A
    def setFeatA(self, evt):
        findFeature(self.entryFeatA.get(),self.listFeatA,self.datasetA)


    # SET FEATURES B
    def setFeatB(self, evt):
        findFeature(self.entryFeatB.get(), self.listFeatB, self.datasetB)

    # GET FEATURE CODE AND SET SAMPLE
    def setSample(self, evt):
        # Here is how to get the value from entrySample
        global sampleFeature
        global features
        sampleFeature = self.entrySample.get()
        found = False
        for feature in features:
            if(sampleFeature == feature['Code']):
                description = copy.deepcopy(feature['Description'])
                if(len(description) > 60 ):
                    description = description[:61] + "..."
                self.labelSample.configure(text="Sample Feature: "+feature['Code']+" - "+description)
                found = True
                break
        if not found:
            tkMessageBox.showerror("Error: Feature not found", "Sample feature not found.")
            sampleFeature=''
            self.labelSample.configure(text="Sample Feature: None")

    # GENERATE AND SAVE THE DATASETS BASED ON THE INPUT
    def saveDataset(self, evt):
        # Save dataset
        datasets=[]
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        for dataset in datasets:
            if(len(dataset['Data']) > 0):
                saveDatasetFile(dataset)

    # GET FEATURE CODE FOR Z TEST / SET FOCUS
    def getFeat(self, evt):
        global selectedFocusFeature

        # Here is how to get the value from focus feature
        featCode = self.entryFocus.get()

        strFeature = "Feature code not found."
        arrTempItemsC = []

        for feature in features:
            if feature['Code'] == featCode:
                strFeature = feature['Code'] + " - " + feature['Description']
                selectedFocusFeature = copy.deepcopy(feature)
                for response in selectedFocusFeature['Responses']:
                    tempResp = response['Code'] + " - " + response['Description']
                    arrTempItemsC.append(tempResp)
                break

        self.textFeature.config(text=strFeature)

        #DELETE THEN SET VALUES TO THE ATTRIBUTE LIST
        self.listAttributes.delete(0, END)
        
        for C in arrTempItemsC:
            self.listAttributes.insert(END, C)

    

    
    #Do regular test based on what is inputted in the UI
    def test(self, evt):
        datasets = []
        fileNames = []
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        global selectedFocusFeature
        global sampleFeature
        global Za
        global allValues
        global selectedFocusFeatureValues
        global populationDir
        global features
        if(testType == 'Sample vs Population'):
            for dataset in datasets:
                convertDatasetValuesToGroups(dataset, features)
                for feature in features:
                    allValues, selectedValues = getFocusFeatureValues(feature, ['b'])


            

            
            '''
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)

            saveFile = svp.sampleVsPopulation(populationDir, sampleFeature, selectedFocusFeature['Code'], allValues, selectedValues, Za)

            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
            '''
        elif(testType == 'Sample vs Sample'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            for i in range(0, len(datasets)):
                fileName = makeFileName(datasets[i])
                writeCSVDict(fileName, datasets[i]['Data'])
                fileNames.append(fileName)
            saveFile,z95,z99 = svs.sampleVsSample(fileNames, selectedFocusFeature['Code'], allValues, selectedValues)
            removeFiles(fileNames)
            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
        elif(testType == 'Chi-test'):
            i = 0
            for dataset in datasets:
                convertDatasetValuesToGroups(dataset, features)
                fileName = makeFileName(dataset)
                i = i + 1
                writeCSVDict(fileName, dataset['Data'])
                fileNames.append(fileName)
            if not (os.path.isfile("Updated-Variables.csv")):
                makeUpdatedVariables(features, "Updated-Variables.csv")
            saveFile = ct.chiTest(fileNames)
            removeFiles(fileNames)
            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
        else:
            tkMessageBox.showerror("Error: No test selected", "Please select a test")

    #Function that happens when the 'Enqueue' button is pressed
    def queue(self, evt):
        datasets = []
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        global testType
        if(testType == 'Sample vs Population'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            self.addToQueue(testType, popDirArg = populationDir, sampleFeatArg = sampleFeature, selectedFeatArg = selectedFocusFeature['Code'], allValArg = allValues, selValArg = selectedValues, zArg = Za)
        elif(testType == 'Sample vs Sample'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            self.addToQueue(testType, datasetArgs = datasets, selectedFeatArg = selectedFocusFeature['Code'], allValArg = allValues, selValArg = selectedValues)
        elif(testType == 'Chi-test'):
            self.addToQueue(testType, datasetArgs=datasets)
        else:
            tkMessageBox.showerror("Error: No test selected", "Please select a test")

    #Conducts all of the tests in the queue. 
    def testQueue(self, evt):
        if len(tests) == 0:
            tkMessageBox.showerror("Empty queue", "Queue is empty. Please queue a test.")
            return -1
        for test in tests:
            fileNames = []
            if(test['Type'] == 'Sample vs Population'):
                svp.sampleVsPopulation(test['Population Path'], test['Sample Feature'], test['Selected Feature'], test['SF All Values'], test['SF Selected Values'], test['Z Critical Value'])
            elif(test['Type'] == 'Sample vs Sample'):
                for i in range(0, len(test['Datasets'])):
                    fileName = makeFileName(test['Datasets'][i])
                    writeCSVDict(fileName, test['Datasets'][i]['Data'])
                    fileNames.append(fileName)
                svs.sampleVsSample(fileNames, test['Selected Feature'], test['SF All Values'], test['SF Selected Values'])
                removeFiles(fileNames)
            elif(test['Type'] == 'Chi-test'):
                i = 0
                for dataset in test['Datasets']:
                    convertDatasetValuesToGroups(dataset, features)
                    fileName = makeFileName(dataset)
                    i = i + 1
                    writeCSVDict(fileName, dataset['Data'])
                    fileNames.append(fileName)
                if not (os.path.isfile("Updated-Variables.csv")):
                    makeUpdatedVariables(features, "Updated-Variables.csv")
                ct.chiTest(fileNames)
                removeFiles(fileNames)
        tkMessageBox.showinfo("Test Queue Complete", "All of the tests in the queue have been completed.")


    def clearQueue(self, evt):
        tests[:] = []
        self.labelQueueCount.configure(text='Queue Count: ' + str(len(tests)))
        self.resetViews()
        tkMessageBox.showinfo("Reset", "Queue cleared.")
        
    def resetViews(self):
        global sampleFeature
        global selectedFocusFeature
        global allValues
        sampleFeature = ''
        selectedFocusFeature=''
        allValues = ''
        self.entryFeatA.delete(0,END)
        self.entryFeatB.delete(0,END)
        self.entryFocus.delete(0,END)
        self.labelFeatACount.configure(text='Dataset Count: '+ str(0))
        self.labelFeatBCount.configure(text='Dataset Count: '+ str(0))
        self.listFeatA.delete(0, END)
        self.listFeatB.delete(0, END)
        self.listAttributes.delete(0,END)

        
            
    # SET THE TEST WHEN SELECTED IN COMBOBOX
    def setTest(self, evt):
        global testType
        testType = self.comboBoxTestType.get()
        self.textTestType.destroy()
        self.adjustViews()

    # DISABLE BUTTONS/ENTRIES BASED ON TEST SELECTED
    def adjustViews(self):
        # ["Chi-test","Z-score statistics of pooled proportions","Standard Error of Population"]
        self.buttonGetFeat.configure(state='normal')
        self.labelZCriticalValue.configure(state='normal')
        self.labelFeature.configure(state='normal')
        self.buttonGetFeat.configure(state='normal')
        self.buttonSample.configure(state='normal')
        self.entrySample.configure(state='normal')
        self.comboCriticalValue.configure(state='readonly')
        self.entryFocus.configure(state='normal')
        self.entryFocus.delete(0, END)
        self.entryFeatA.configure(state='normal')
        self.entryFeatA.delete(0, END)
        self.entryFeatB.configure(state='normal')
        self.entryFeatB.delete(0, END)
        self.buttonShowA.configure(state='normal')
        self.buttonShowB.configure(state='normal')

        # UNLOCK WHEN TEST SELECTED
        self.entryVariableFile.configure(state='normal')
        self.entryVariableFile.delete(0, END)
        self.entryPopulation.configure(state='normal')
        self.buttonPopulation.configure(state='normal')
        self.buttonTest.configure(state='normal')
        self.buttonTestQueue.configure(state='normal')
        self.buttonPopulation.configure(state='normal')
        self.buttonClearQueue.configure(state='normal')
        self.buttonQueue.configure(state='normal')
        self.buttonSaveDatasets.configure(state='normal')
        self.listAttributes.configure(state='normal')
        self.listAttributes.delete(0, END)
        self.listFeatA.configure(state='normal')
        self.listFeatA.delete(0, END)
        self.listFeatB.configure(state='normal')
        self.listFeatA.delete(0, END)
        self.comboCriticalValue.configure(state='readonly')
        if testType == 'Chi-test':
            self.buttonGetFeat.configure(state='disabled')
            self.labelZCriticalValue.configure(state='disabled')
            self.labelFeature.configure(state='disabled')
            self.buttonGetFeat.configure(state='disabled')
            self.buttonSample.configure(state='disabled')
            self.comboCriticalValue.configure(state='disabled')
            self.entryFocus.configure(state='disabled')
            self.entrySample.configure(state='disabled')
            self.entryFocus.configure(state='disabled')
        elif testType == 'Sample vs Sample':
            self.buttonSample.configure(state='disabled')
            self.entrySample.configure(state='disabled')
            self.comboCriticalValue.configure(state='disabled')
        elif testType == 'Sample vs Population':
            self.comboCriticalValue.configure(state='readonly')
            self.entryFeatA.configure(state='disabled')
            self.entryFeatB.configure(state='disabled')
            self.buttonShowA.configure(state='disabled')
            self.buttonShowB.configure(state='disabled')
    '''
    CHANGES HERE!
    '''
    def getCriticalValue(self, evt):
        global criticalValue
        global Za
        criticalValue = self.comboCriticalValue.get()
        if criticalValue == "0.80":
            print 1.27
            Za = 1.27
        elif criticalValue == "0.90":
            print 1.645
            Za = 1.645
        elif criticalValue == "0.95":
            print 1.645
            Za = 1.96
        elif criticalValue == "0.98":
            print 2.33
            Za = 2.33
        elif criticalValue == "0.99":
            print 2.58
            Za = 2.58
        else:
            print -1
            Za = -1

    '''
    QUERY FUNCTIONS
    '''

    def setFocusFeatureValuesA(self, evt):
        print 'Getting freq and prop A'
        setFocusFeatureValues(evt, self.datasetA, self.entryQueryFeatureA.get(), self.labelQueryDataA)
    
    def setFocusFeatureValuesB(self, evt):
        print 'Getting freq and prop B'
        setFocusFeatureValues(evt, self.datasetB, self.entryQueryFeatureB.get(), self.labelQueryDataB)



    def querySetPopulation(self, evt):
        self.setPopulation(evt)

    def querySetDataA(self, evt):
        findFeature(self.entryQuerySetDataA.get(), self.listQuerySetDataA,self.datasetA,"Dataset_Feature")

    def querySetDataB(self, evt):
        findFeature(self.entryQuerySetDataB.get(), self.listQuerySetDataB, self.datasetB,"Dataset_Feature")

    
    def querySelectDataValuesA(self, evt):
        selectDatasetValues(evt, self.datasetA, self.populationDataset, self.labelQueryDataACount)
        print 'Selecting values for Data A'
    
    def querySelectDataValuesB(self, evt):
        selectDatasetValues(evt, self.datasetB, self.populationDataset, self.labelQueryDataBCount)
        print 'Selecting values for Data B'

    def queryAddFilterA(self, evt):
        # print 'Saving Data A'
        # saveDatasetFile(self.datasetA)
        new_data = filterDataset(self.datasetA, self.datasetA['Feature'], self.datasetA['Feature']['Selected Responses'])
        self.datasetA['Filter Features'].append(self.datasetA['Feature'])
        self.datasetA['Data'] = new_data

        queryStrFilterA = ''

        for i in range(0, len(self.datasetA['Filter Features'])):
            if i == 0:
                queryStrFilterA = queryStrFilterA + self.datasetA['Filter Features'][i]['Code']
            else:
                queryStrFilterA = queryStrFilterA + "->" + self.datasetA['Filter Features'][i]['Code']

        # Concat the Filter String Here
        self.labelFrameQueryDataA.configure(text=queryStrFilterA)

    def queryAddFilterB(self, evt):
        new_data = filterDataset(self.datasetB, self.datasetB['Feature'], self.datasetB['Feature']['Selected Responses'])
        self.datasetB['Filter Features'].append(self.datasetB['Feature'])
        self.datasetB['Data'] = new_data

        queryStrFilterB = ''

        for i in range(0, len(self.datasetB['Filter Features'])):
            if i == 0:
                queryStrFilterB = queryStrFilterB + self.datasetB['Filter Features'][i]['Code']
            else:
                queryStrFilterB = queryStrFilterB + "->" + self.datasetB['Filter Features'][i]['Code']

        # Concat the Filter String Here
        self.labelFrameQueryDataB.configure(text=queryStrFilterB)


    def querySetFeatureA(self, evt):
        findFeature(self.entryQueryFeatureA.get(), self.listQueryDataA,self.datasetA,"Focus_Feature")

    def querySetFeatureB(self, evt):
        findFeature(self.entryQueryFeatureB.get(), self.listQueryDataB,self.datasetB,"Focus_Feature")

    def queryZTest(self, evt):
        z95 = 1.645
        z99 = 2.58
        print 'Z Test'

        #Check if the selected focus feature and selected values of it are the same for both samples
        isSame = isSameFocusFeat(self.datasetA, self.datasetB, self.datasetA['Focus Feature']['Selected Values'], self.datasetB['Focus Feature']['Selected Values'])
        if(isSame == 1):
            #Calculate Z score between the two samples
            zScore, pPrime, SE = svs.ZTest(self.datasetA['Total'], self.datasetA['ProportionPercent'], self.datasetB['Total'], self.datasetB['ProportionPercent'])
            #Get result if accept/reject at 95% confidence
            z95Result = svs.compareZtoZCritical(zScore, z95)
            #Get result if accept/reject at 99% confidence
            z99Result = svs.compareZtoZCritical(zScore, z99)
            #Display Results
            self.labelQueryZTest.configure(text='Z-Score: ' + str(round(zScore,2)) +  ', 95%: ' + z95Result + ', 99%: ' + z99Result)

    def querySetType(self, evt):
        global queryType
        queryType = self.comboQueryType.get()
        self.adjustQueryViews()

    '''
    def adjustQueryViews(self):
        self.listQuerySetDataB.configure(state='normal')
        self.buttonQuerySaveB.configure(state='normal')
        self.entryQuerySetDataB.configure(state='normal')
        self.buttonQuerySetDataB.configure(state='normal')
        self.labelQueryDataBCount.configure(state='normal')
        self.labelFrameQueryDataA.configure(text='Dataset A')
        self.labelFrameQueryDataB.configure(text='Dataset A')

        if queryType == 'Sample VS Population':
            self.listQuerySetDataB.configure(state='disabled')
            self.listQuerySetDataB.delete(0, END)
            self.buttonQuerySaveB.configure(state='disabled')
            self.entryQuerySetDataB.configure(state='disabled')
            self.buttonQuerySetDataB.configure(state='disabled')
            self.labelQueryDataBCount.configure(state='disabled')
            self.labelFrameQueryDataA.configure(text='Sample')
            self.labelFrameQueryDataB.configure(text='Population')
            self.querySetAllFeatures()

    def querySetAllFeatures(self):
        #Test items
        global strarrAllFeatures
        strarrAllFeatures = list(self.listQuerySetDataA.get(0, END))
        
    '''


    '''
    allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
    saveFile = svp.sampleVsPopulation(populationDir, sampleFeature, selectedFocusFeature['Code'], allValues, selectedValues, Za)
    tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
    '''

    def uploadInitVarDesc(self, evt):
        print "UPLOADED"
        initVarDisc = askopenfilename(title = "Select file",filetypes = (("csv files","*.csv"),("all files","*.*")))
        self.entryInitialVarDesc.delete(0, END)
        self.entryInitialVarDesc.insert(0, initVarDisc)
        global features
        features = readFeatures(initVarDisc,"^")
        if (len(features)) > 0:
            tkMessageBox.showinfo("Initial Variable Description set","Initial Variable Description uploaded")
        else:
            tkMessageBox.showerror("Upload error", "Error uploading Initial Variable Description. Please try again.")

            


if __name__ == '__main__':
    vp_start_gui()





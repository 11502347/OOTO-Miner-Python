#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 26, 2018 12:01:25 PM
import sys
import csv
import tkMessageBox
from tkFileDialog import askopenfilename
import copy
import SampleVsPopulation as svp
import SampleVsSample as svs
import ChiTest as ct
import os

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import Mother_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.resizable(0, 0)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (root)
    Mother_support.init(root, top)
    root.mainloop()

w = None
def create_OOTO_Miner(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    Mother_support.set_Tk_var()
    top = OOTO_Miner (w)
    Mother_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_OOTO_Miner():
    global w
    w.destroy()
    w = None

def readFeatures(filename, varMark):
    features = []
    with open(filename) as f:
        reader = csv.reader(f)
        for row in reader:
            if(row[0]==varMark):
                new_feature = {'Description':row[2], 'Code':row[1], 'Responses':[]}
                features.append(new_feature)
            else:
                new_response = {'Group':row[0], 'Code':row[1], 'Description':row[2]}
                new_feature['Responses'].append(new_response)
    return features

def readCSVDict(filename):
    rows = csv.DictReader(open(filename))
    return rows   

def writeCSVDict(filename, dataset):
    with open(filename, 'wb') as f:
        w = csv.DictWriter(f, dataset[0].keys())
        w.writeheader()
        w.writerows(dataset)

def convertDatasetValuesToGroups(dataset, features):
    #response['Code'] == record[self.datasetA['Feature']['Code']] for response in self.datasetA['Selected Responses']
    for record in dataset['Data']:
        for feature in features:
            converted = False
            if feature['Code'] in record.keys(): #If the feature code exists in the record
                for response in feature['Responses']:
                    if record[feature['Code']] == response['Code']:
                        record[feature['Code']] = response['Group']
                        converted = True
                #if not any(record[feature['Code'] == response['Code'] for response in feature['Responses']):
                if not converted:
                    record[feature['Code']] = '-1.0'
            else:
                record[feature['Code']] = '-1.0'
    return dataset

def removeFiles(fileNames):
    for fileName in fileNames:
        os.remove(fileName)
    
def makeFileName(dataset):
    featureDesc = copy.deepcopy(dataset['Feature']['Description'])
    if(len(featureDesc) > 10):
        featureDesc = featureDesc[:11]
    fileName = featureDesc
    for response in dataset['Selected Responses']:
        fileName = fileName + response['Description'] + "_"
    fileName = fileName + ".csv"
    return fileName

def makeUpdatedVariables(features, fileName):
    with open(fileName, "wb") as csv_file:
        writer = csv.writer(csv_file, delimiter=',')
        for feature in features:
            featureRow = []
            featureRow.append('^')
            featureRow.append(feature['Code'])
            featureRow.append(feature['Description'])
            #Write that featureRow
            writer.writerow(featureRow)
            groups = [] 
            for response in feature['Responses']: 
                responseRow = []
                if response['Group'] not in groups:
                    groups.append(response['Group'])
                    responseRow.append(response['Group'])
                    responseRow.append('Group ' + response['Group'])
                    #Write that responseRow
                    writer.writerow(responseRow)


def getData(code, selectedValues):
    data = []
    for record in self.populationDataset:
        if(record[code] in selectedValues):
            data.append(record)
    
    return data

def getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues):
    allValues = ""
    for i in range(0, len(selectedFocusFeature['Responses'])):
        if(i == len(selectedFocusFeature['Responses'])-1):
            allValues = allValues + str(selectedFocusFeature['Responses'][i]['Code'])
        else:
            allValues = allValues + str(selectedFocusFeature['Responses'][i]['Code']) + ":"          
    selectedValues = ""
    for i in range(0, len(selectedFocusFeatureValues)):
        if(i == len(selectedFocusFeatureValues)-1):
            selectedValues = selectedValues + str(selectedFocusFeatureValues[i])
        else:
            selectedValues = selectedValues + str(selectedFocusFeatureValues[i]) + ":"

    return allValues, selectedValues

def setDatasetFeatures(entryFeat, listFeat, dataset):
        # Here is how to get the value from entryFeatA
        featCode = entryFeat
        arrTempItems = []
        found = False
        #Get proper list of features from initial variable description
        for feature in features:
            if feature['Code'] == featCode:
                found = True
                dataset['Feature'] = copy.deepcopy(feature)
                for response in feature['Responses']:
                    tempResp = response['Code'] + " - " + response['Description']
                    arrTempItems.append(tempResp)
                break
        if not found:
            tkMessageBox.showerror("Error: Feature not found", "Feature not found in Variable Descriptor. Try again.")
        listFeat.delete(0, END)
        for A in arrTempItems:
            listFeat.insert(END, A)

def selectDatasetValues(evt, dataset, populationDataset, labelFeatCount):
    global populationDir
    listbox = evt.widget
    selectedValues = [listbox.get(i) for i in listbox.curselection()]
    dataset['Selected Responses']=[]
    for sv in selectedValues:
        responseArr = sv.split(" - ")
        for response in dataset['Feature']['Responses']:
            if response['Code'] == responseArr[0]:
                selected_response = copy.deepcopy(response)
                dataset['Selected Responses'].append(selected_response)
    dataset['Data']=[]
    if not (populationDir == ""):
        populationDataset = readCSVDict(populationDir)
        for record in populationDataset:
            if any (response['Code'] == record[dataset['Feature']['Code']] for response in dataset['Selected Responses']):
                dataset['Data'].append(record)
    else:
        tkMessageBox.showwarning("Error: No population", "No population dataset uploaded.")
    labelFeatCount.configure(text="Dataset Count: " + str(len(dataset['Data'])))



class OOTO_Miner:

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#d9d9d9' # X11 color: 'gray85'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1000x600+522+139")
        top.title("OOTO Miner")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Tabs = ttk.Notebook(top)
        self.Tabs.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.01)
        self.Tabs.configure(width=604)
        self.Tabs.configure(takefocus="")
        self.Tabs_t1 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t1, padding=3)
        self.Tabs.tab(0, text="Tests", underline="-1", )
        self.Tabs_t3 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t3, padding=3)
        self.Tabs.tab(1, text="Query", underline="-1", )
        self.Tabs_t2 = ttk.Frame(self.Tabs)
        self.Tabs.add(self.Tabs_t2, padding=3)
        self.Tabs.tab(2, text="Variable Descriptor", underline="-1", )


        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)
        self.menubar.add_command(label="About", command=self.showAbout)
        self.menubar.add_command(label="Help")


        '''
        TAB 1 - TESTS
        '''
        self.labelQueueCount = Label(self.Tabs_t1)
        self.labelQueueCount.place(relx=0.64, rely=0.86, height=33, width=210)
        self.labelQueueCount.configure(text='''Queue Count: 0''')

        self.buttonTest = Button(self.Tabs_t1)
        self.buttonTest.place(relx=0.877, rely=0.93, height=33, width=115)
        self.buttonTest.configure(activebackground="#d9d9d9")
        self.buttonTest.configure(activeforeground="#000000")
        self.buttonTest.configure(background="#d9d9d9")
        self.buttonTest.configure(disabledforeground="#a3a3a3")
        self.buttonTest.configure(foreground="#000000")
        self.buttonTest.configure(highlightbackground="#d9d9d9")
        self.buttonTest.configure(highlightcolor="black")
        self.buttonTest.configure(pady="0")
        self.buttonTest.configure(text='''Test''')
        self.buttonTest.configure(state='disabled')


        self.buttonTestQueue = Button(self.Tabs_t1)
        self.buttonTestQueue.place(relx=0.744, rely=0.93, height=33, width=115)
        self.buttonTestQueue.configure(activebackground="#d9d9d9")
        self.buttonTestQueue.configure(activeforeground="#000000")
        self.buttonTestQueue.configure(background="#d9d9d9")
        self.buttonTestQueue.configure(disabledforeground="#a3a3a3")
        self.buttonTestQueue.configure(foreground="#000000")
        self.buttonTestQueue.configure(highlightbackground="#d9d9d9")
        self.buttonTestQueue.configure(highlightcolor="black")
        self.buttonTestQueue.configure(pady="0")
        self.buttonTestQueue.configure(text='''Test Queue''')
        self.buttonTestQueue.configure(state='disabled')

        self.buttonClearQueue = Button(self.Tabs_t1)
        self.buttonClearQueue.place(relx=0.627, rely=0.93, height=33, width=115)
        self.buttonClearQueue.configure(activebackground="#d9d9d9")
        self.buttonClearQueue.configure(activeforeground="#000000")
        self.buttonClearQueue.configure(background="#d9d9d9")
        self.buttonClearQueue.configure(disabledforeground="#a3a3a3")
        self.buttonClearQueue.configure(foreground="#000000")
        self.buttonClearQueue.configure(highlightbackground="#d9d9d9")
        self.buttonClearQueue.configure(highlightcolor="black")
        self.buttonClearQueue.configure(pady="0")
        self.buttonClearQueue.configure(text='''Clear Queue''')
        self.buttonClearQueue.configure(state='disabled')

        self.buttonQueue = Button(self.Tabs_t1)
        self.buttonQueue.place(relx=0.51, rely=0.93, height=33, width=115)
        self.buttonQueue.configure(activebackground="#d9d9d9")
        self.buttonQueue.configure(activeforeground="#000000")
        self.buttonQueue.configure(background="#d9d9d9")
        self.buttonQueue.configure(disabledforeground="#a3a3a3")
        self.buttonQueue.configure(foreground="#000000")
        self.buttonQueue.configure(highlightbackground="#d9d9d9")
        self.buttonQueue.configure(highlightcolor="black")
        self.buttonQueue.configure(pady="0")
        self.buttonQueue.configure(text='''Enqueue''')
        self.buttonQueue.configure(state='disabled')

        '''
        CHANGES HERE!
        '''
        strarrTestType = ["Chi-test","Sample vs Sample","Sample vs Population"]
        self.comboBoxTestType = ttk.Combobox(self.Tabs_t1)
        self.comboBoxTestType.place(relx=0.01, rely=0.02, relheight=0.04
                , relwidth=0.49)
        self.comboBoxTestType.configure(exportselection="0")
        #self.comboBoxTestType.configure(textvariable=Mother_support.combobox)
        self.comboBoxTestType.configure(takefocus="")
        self.comboBoxTestType.configure(values=strarrTestType)
        self.comboBoxTestType.configure(state="readonly")
        # self.adjustViews()

        ''' 
        self.buttonTestType = Button(top)
        self.buttonTestType.place(relx=0.01, rely=0.07, height=23, width=486)
        self.buttonTestType.configure(activebackground="#d9d9d9")
        self.buttonTestType.configure(activeforeground="#000000")
        self.buttonTestType.configure(background="#d9d9d9")
        self.buttonTestType.configure(disabledforeground="#a3a3a3")
        self.buttonTestType.configure(foreground="#000000")
        self.buttonTestType.configure(highlightbackground="#d9d9d9")
        self.buttonTestType.configure(highlightcolor="black")
        self.buttonTestType.configure(pady="0")
        self.buttonTestType.configure(text=''Select Test'')
        '''

        self.textTestType = Label(self.Tabs_t1)
        self.textTestType.place(relx=0.01, rely=0.07, height=23, width=486)
        self.textTestType.configure(activebackground="#d9d9d9")
        self.textTestType.configure(activeforeground="#000000")
        self.textTestType.configure(background="#d9d9d9")
        self.textTestType.configure(disabledforeground="#a3a3a3")
        self.textTestType.configure(foreground="#000000")
        self.textTestType.configure(highlightbackground="#d9d9d9")
        self.textTestType.configure(highlightcolor="black")
        self.textTestType.configure(pady="0")
        self.textTestType.configure(text="WARNING: No Selected Test")

        self.entryPopulation = Entry(self.Tabs_t1)
        self.entryPopulation.place(relx=0.01, rely=0.12, relheight=0.04
                , relwidth=0.48)
        self.entryPopulation.configure(background="white")
        self.entryPopulation.configure(disabledforeground="#a3a3a3")
        self.entryPopulation.configure(font="TkFixedFont")
        self.entryPopulation.configure(foreground="#000000")
        self.entryPopulation.configure(highlightbackground="#d9d9d9")
        self.entryPopulation.configure(highlightcolor="black")
        self.entryPopulation.configure(insertbackground="black")
        self.entryPopulation.configure(selectbackground="#c4c4c4")
        self.entryPopulation.configure(selectforeground="black")
        self.entryPopulation.configure(state='disabled')

        self.buttonPopulation = Button(self.Tabs_t1)
        self.buttonPopulation.place(relx=0.01, rely=0.17, height=23, width=486)
        self.buttonPopulation.configure(activebackground="#d9d9d9")
        self.buttonPopulation.configure(activeforeground="#000000")
        self.buttonPopulation.configure(background="#d9d9d9")
        self.buttonPopulation.configure(disabledforeground="#a3a3a3")
        self.buttonPopulation.configure(foreground="#000000")
        self.buttonPopulation.configure(highlightbackground="#d9d9d9")
        self.buttonPopulation.configure(highlightcolor="black")
        self.buttonPopulation.configure(pady="0")
        self.buttonPopulation.configure(text='''Upload Population''')
        self.buttonPopulation.configure(state='disabled')

        self.labelFrameZTest = LabelFrame(self.Tabs_t1)
        self.labelFrameZTest.place(relx=0.51, rely=0.0, relheight=0.85
                , relwidth=0.48)
        self.labelFrameZTest.configure(relief=GROOVE)
        self.labelFrameZTest.configure(foreground="black")
        self.labelFrameZTest.configure(text='''Z -Test''')
        self.labelFrameZTest.configure(background="#d9d9d9")
        self.labelFrameZTest.configure(highlightbackground="#d9d9d9")
        self.labelFrameZTest.configure(highlightcolor="black")
        self.labelFrameZTest.configure(width=480)

        self.labelZCriticalValue = Label(self.labelFrameZTest)
        self.labelZCriticalValue.place(relx=0.02, rely=0.06, height=26
                , width=108)
        self.labelZCriticalValue.configure(activebackground="#f9f9f9")
        self.labelZCriticalValue.configure(activeforeground="black")
        self.labelZCriticalValue.configure(background="#d9d9d9")
        self.labelZCriticalValue.configure(disabledforeground="#a3a3a3")
        self.labelZCriticalValue.configure(foreground="#000000")
        self.labelZCriticalValue.configure(highlightbackground="#d9d9d9")
        self.labelZCriticalValue.configure(highlightcolor="black")
        self.labelZCriticalValue.configure(text='''Confidence Interval''')

        self.labelFeature = Label(self.labelFrameZTest)
        self.labelFeature.place(relx=0.02, rely=0.17, height=26, width=55)
        self.labelFeature.configure(activebackground="#f9f9f9")
        self.labelFeature.configure(activeforeground="black")
        self.labelFeature.configure(background="#d9d9d9")
        self.labelFeature.configure(disabledforeground="#a3a3a3")
        self.labelFeature.configure(foreground="#000000")
        self.labelFeature.configure(highlightbackground="#d9d9d9")
        self.labelFeature.configure(highlightcolor="black")
        self.labelFeature.configure(text='''Feature''')

        self.textFeature = Label(self.labelFrameZTest)
        self.textFeature.place(relx=0.17, rely=0.17, relheight=0.1, relwidth=0.8)
        self.textFeature.configure(activebackground="#d9d9d9")
        self.textFeature.configure(activeforeground="#000000")
        self.textFeature.configure(background="#d9d9d9")
        self.textFeature.configure(disabledforeground="#a3a3a3")
        self.textFeature.configure(foreground="#000000")
        self.textFeature.configure(highlightbackground="#d9d9d9")
        self.textFeature.configure(highlightcolor="black")
        self.textFeature.configure(pady="0")

        self.listAttributes = Listbox(self.labelFrameZTest)
        self.listAttributes.place(relx=0.02, rely=0.27, relheight=0.68
                , relwidth=0.95)
        self.listAttributes.configure(background="white")
        self.listAttributes.configure(disabledforeground="#a3a3a3")
        self.listAttributes.configure(exportselection="0")
        self.listAttributes.configure(font="TkFixedFont")
        self.listAttributes.configure(foreground="#000000")
        self.listAttributes.configure(highlightbackground="#d9d9d9")
        self.listAttributes.configure(highlightcolor="black")
        self.listAttributes.configure(selectbackground="#c4c4c4")
        self.listAttributes.configure(selectforeground="black")
        self.listAttributes.configure(width=454)
        self.listAttributes.configure(selectmode=MULTIPLE)
        self.listAttributes.configure(state='disabled')



        '''
        self.entryCriticalValue = Entry(self.labelFrameZTest)
        self.entryCriticalValue.place(relx=0.25, rely=0.05, relheight=0.04
                , relwidth=0.72)
        self.entryCriticalValue.configure(background="white")
        self.entryCriticalValue.configure(disabledforeground="#a3a3a3")
        self.entryCriticalValue.configure(font="TkFixedFont")
        self.entryCriticalValue.configure(foreground="#000000")
        self.entryCriticalValue.configure(highlightbackground="#d9d9d9")
        self.entryCriticalValue.configure(highlightcolor="black")
        self.entryCriticalValue.configure(insertbackground="black")
        self.entryCriticalValue.configure(selectbackground="#c4c4c4")
        self.entryCriticalValue.configure(selectforeground="black")
        '''
        

        '''
        CHANGES HERE!
        '''
        strarrCriticalValue = ["0.80", "0.90", "0.95", "0.98", "0.99"]
        self.comboCriticalValue = ttk.Combobox(self.labelFrameZTest)
        self.comboCriticalValue.place(relx=0.25, rely=0.05, relheight=0.04, relwidth=0.72)
        self.comboCriticalValue.configure(exportselection="0")
        self.comboCriticalValue.configure(takefocus="")
        self.comboCriticalValue.configure(values=strarrCriticalValue)
        self.comboCriticalValue.configure(state="disabled")
        self.comboCriticalValue.current(0)
        global criticalValue
        criticalValue = self.comboCriticalValue.get()

        self.buttonGetFeat = Button(self.labelFrameZTest)
        self.buttonGetFeat.place(relx=0.65, rely=0.11, height=23, width=156)
        self.buttonGetFeat.configure(activebackground="#d9d9d9")
        self.buttonGetFeat.configure(activeforeground="#000000")
        self.buttonGetFeat.configure(background="#d9d9d9")
        self.buttonGetFeat.configure(disabledforeground="#a3a3a3")
        self.buttonGetFeat.configure(foreground="#000000")
        self.buttonGetFeat.configure(highlightbackground="#d9d9d9")
        self.buttonGetFeat.configure(highlightcolor="black")
        self.buttonGetFeat.configure(pady="0")
        self.buttonGetFeat.configure(text='''Enter Feature Code''')
        self.buttonGetFeat.configure(width=156)
        self.buttonGetFeat.configure(state='disabled')

        '''
        self.Entry1 = Entry(self.labelFrameZTest)
        self.Entry1.place(relx=0.25, rely=0.11, relheight=0.04, relwidth=0.38)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(width=184)
        '''

        self.labelFrameGenerateSamples = LabelFrame(self.Tabs_t1)
        self.labelFrameGenerateSamples.place(relx=0.01, rely=0.22, relheight=0.78, relwidth=0.49)
        self.labelFrameGenerateSamples.configure(relief=GROOVE)
        self.labelFrameGenerateSamples.configure(foreground="black")
        self.labelFrameGenerateSamples.configure(text='''Generate Samples''')
        self.labelFrameGenerateSamples.configure(background="#d9d9d9")
        self.labelFrameGenerateSamples.configure(highlightbackground="#d9d9d9")
        self.labelFrameGenerateSamples.configure(highlightcolor="black")
        self.labelFrameGenerateSamples.configure(width=490)

        self.entrySample = Entry(self.labelFrameGenerateSamples)
        self.entrySample.place(relx=0.02, rely=0.05, relheight=0.05
                , relwidth=0.46)
        self.entrySample.configure(background="white")
        self.entrySample.configure(disabledforeground="#a3a3a3")
        self.entrySample.configure(font="TkFixedFont")
        self.entrySample.configure(foreground="#000000")
        self.entrySample.configure(highlightbackground="#d9d9d9")
        self.entrySample.configure(highlightcolor="black")
        self.entrySample.configure(insertbackground="black")
        self.entrySample.configure(selectbackground="#c4c4c4")
        self.entrySample.configure(selectforeground="black")
        self.entrySample.configure(state='disabled')

        self.labelSample = Label(self.labelFrameGenerateSamples)
        self.labelSample.place(relx=0.02, rely=0.11, relheight=0.05, relwidth=0.95)
        self.labelSample.configure(text='''Sample Feature: None ''')
        self.labelSample.configure(justify=LEFT)

        self.entryFocus = Entry(self.labelFrameZTest)
        self.entryFocus.place(relx=0.43, rely=0.11, relheight=0.04, relwidth=0.2)
        self.entryFocus.configure(background="white")
        self.entryFocus.configure(disabledforeground="#a3a3a3")
        self.entryFocus.configure(font="TkFixedFont")
        self.entryFocus.configure(foreground="#000000")
        self.entryFocus.configure(insertbackground="black")
        self.entryFocus.configure(width=184)
        self.entryFocus.configure(state='disabled')

        '''
        self.entryFocus.place(relx=0.51, rely=0.05, relheight=0.05
                , relwidth=0.46)
        self.entryFocus.configure(background="white")
        self.entryFocus.configure(disabledforeground="#a3a3a3")
        self.entryFocus.configure(font="TkFixedFont")
        self.entryFocus.configure(foreground="#000000")
        self.entryFocus.configure(highlightbackground="#d9d9d9")
        self.entryFocus.configure(highlightcolor="black")
        self.entryFocus.configure(insertbackground="black")
        self.entryFocus.configure(selectbackground="#c4c4c4")
        self.entryFocus.configure(selectforeground="black")
        '''

        self.buttonSample = Button(self.labelFrameGenerateSamples)
        self.buttonSample.place(relx=0.51, rely=0.05, height=23, width=226)
        self.buttonSample.configure(activebackground="#d9d9d9")
        self.buttonSample.configure(activeforeground="#000000")
        self.buttonSample.configure(background="#d9d9d9")
        self.buttonSample.configure(disabledforeground="#a3a3a3")
        self.buttonSample.configure(foreground="#000000")
        self.buttonSample.configure(highlightbackground="#d9d9d9")
        self.buttonSample.configure(highlightcolor="black")
        self.buttonSample.configure(pady="0")
        self.buttonSample.configure(text='''Enter Sample Feature''')
        self.buttonSample.configure(state='disabled')

        '''
        self.buttonFocus = Button(self.labelFrameGenerateSamples)
        self.buttonFocus.place(relx=0.51, rely=0.11, height=23, width=226)
        self.buttonFocus.configure(activebackground="#d9d9d9")
        self.buttonFocus.configure(activeforeground="#000000")
        self.buttonFocus.configure(background="#d9d9d9")
        self.buttonFocus.configure(disabledforeground="#a3a3a3")
        self.buttonFocus.configure(foreground="#000000")
        self.buttonFocus.configure(highlightbackground="#d9d9d9")
        self.buttonFocus.configure(highlightcolor="black")
        self.buttonFocus.configure(pady="0")
        self.buttonFocus.configure(text='Enter Focus Feature')
        '''

        self.buttonShowA = Button(self.labelFrameGenerateSamples)
        self.buttonShowA.place(relx=0.02, rely=0.24, height=23, width=226)
        self.buttonShowA.configure(activebackground="#d9d9d9")
        self.buttonShowA.configure(activeforeground="#000000")
        self.buttonShowA.configure(background="#d9d9d9")
        self.buttonShowA.configure(disabledforeground="#a3a3a3")
        self.buttonShowA.configure(foreground="#000000")
        self.buttonShowA.configure(highlightbackground="#d9d9d9")
        self.buttonShowA.configure(highlightcolor="black")
        self.buttonShowA.configure(pady="0")
        self.buttonShowA.configure(text='''Show Features A''')
        self.buttonShowA.configure(state='disabled')

        self.buttonShowB = Button(self.labelFrameGenerateSamples)
        self.buttonShowB.place(relx=0.51, rely=0.24, height=23, width=226)
        self.buttonShowB.configure(activebackground="#d9d9d9")
        self.buttonShowB.configure(activeforeground="#000000")
        self.buttonShowB.configure(background="#d9d9d9")
        self.buttonShowB.configure(disabledforeground="#a3a3a3")
        self.buttonShowB.configure(foreground="#000000")
        self.buttonShowB.configure(highlightbackground="#d9d9d9")
        self.buttonShowB.configure(highlightcolor="black")
        self.buttonShowB.configure(pady="0")
        self.buttonShowB.configure(text='''Show Features B''')
        self.buttonShowB.configure(state='disabled')

        self.listFeatA = Listbox(self.labelFrameGenerateSamples)
        self.listFeatA.place(relx=0.02, rely=0.41, relheight=0.48, relwidth=0.46)
        self.listFeatA.configure(background="white")
        self.listFeatA.configure(disabledforeground="#a3a3a3")
        self.listFeatA.configure(exportselection="0")
        self.listFeatA.configure(font="TkFixedFont")
        self.listFeatA.configure(foreground="#000000")
        self.listFeatA.configure(highlightbackground="#d9d9d9")
        self.listFeatA.configure(highlightcolor="black")
        self.listFeatA.configure(selectbackground="#c4c4c4")
        self.listFeatA.configure(selectforeground="black")
        self.listFeatA.configure(width=224)
        self.listFeatA.configure(selectmode=MULTIPLE)
        self.listFeatA.configure(state='disabled')

        #COUNT LABEL FOR DATASET A
        self.labelFeatACount = Label(self.labelFrameGenerateSamples)
        self.labelFeatACount.place(relx=0.02, rely=0.31, height=26, width=172)
        self.labelFeatACount.configure(background="#d9d9d9")
        self.labelFeatACount.configure(disabledforeground="#a3a3a3")
        self.labelFeatACount.configure(foreground="#000000")



        self.listFeatB = Listbox(self.labelFrameGenerateSamples)
        self.listFeatB.place(relx=0.51, rely=0.41, relheight=0.48, relwidth=0.46)
        self.listFeatB.configure(background="white")
        self.listFeatB.configure(disabledforeground="#a3a3a3")
        self.listFeatB.configure(exportselection="0")
        self.listFeatB.configure(font="TkFixedFont")
        self.listFeatB.configure(foreground="#000000")
        self.listFeatB.configure(highlightbackground="#d9d9d9")
        self.listFeatB.configure(highlightcolor="black")
        self.listFeatB.configure(selectbackground="#c4c4c4")
        self.listFeatB.configure(selectforeground="black")
        self.listFeatB.configure(width=224)
        self.listFeatB.configure(selectmode=MULTIPLE)
        self.listFeatB.configure(state='disabled')

        # COUNT LABEL FOR DATASET B
        self.labelFeatBCount = Label(self.labelFrameGenerateSamples)
        self.labelFeatBCount.place(relx=0.51, rely=0.31, height=26, width=172)
        self.labelFeatBCount.configure(background="#d9d9d9")
        self.labelFeatBCount.configure(disabledforeground="#a3a3a3")
        self.labelFeatBCount.configure(foreground="#000000")

        
        self.buttonSaveDatasets = Button(self.labelFrameGenerateSamples)
        self.buttonSaveDatasets.place(relx=0.02, rely=0.91, height=33, width=466)

        self.buttonSaveDatasets.configure(activebackground="#d9d9d9")
        self.buttonSaveDatasets.configure(activeforeground="#000000")
        self.buttonSaveDatasets.configure(background="#d9d9d9")
        self.buttonSaveDatasets.configure(disabledforeground="#a3a3a3")
        self.buttonSaveDatasets.configure(foreground="#000000")
        self.buttonSaveDatasets.configure(highlightbackground="#d9d9d9")
        self.buttonSaveDatasets.configure(highlightcolor="black")
        self.buttonSaveDatasets.configure(pady="0")
        self.buttonSaveDatasets.configure(text='Save Datasets')
        self.buttonSaveDatasets.configure(state='disabled')
        

        self.entryFeatA = Entry(self.labelFrameGenerateSamples)
        self.entryFeatA.place(relx=0.02, rely=0.17, relheight=0.05
                , relwidth=0.46)
        self.entryFeatA.configure(background="white")
        self.entryFeatA.configure(disabledforeground="#a3a3a3")
        self.entryFeatA.configure(font="TkFixedFont")
        self.entryFeatA.configure(foreground="#000000")
        self.entryFeatA.configure(highlightbackground="#d9d9d9")
        self.entryFeatA.configure(highlightcolor="black")
        self.entryFeatA.configure(insertbackground="black")
        self.entryFeatA.configure(selectbackground="#c4c4c4")
        self.entryFeatA.configure(selectforeground="black")
        self.entryFeatA.configure(state='disabled')

        self.entryFeatB = Entry(self.labelFrameGenerateSamples)
        self.entryFeatB.place(relx=0.51, rely=0.17, relheight=0.05
                , relwidth=0.46)
        self.entryFeatB.configure(background="white")
        self.entryFeatB.configure(disabledforeground="#a3a3a3")
        self.entryFeatB.configure(font="TkFixedFont")
        self.entryFeatB.configure(foreground="#000000")
        self.entryFeatB.configure(highlightbackground="#d9d9d9")
        self.entryFeatB.configure(highlightcolor="black")
        self.entryFeatB.configure(insertbackground="black")
        self.entryFeatB.configure(selectbackground="#c4c4c4")
        self.entryFeatB.configure(selectforeground="black")
        self.entryFeatB.configure(state='disabled')
        '''
        BINDING ELEMENTS FOR TAB 1
        notes: bind the functions as objects ( ie. setPopulation not setPopulation() )
        <Button-1> On left click
        <<ComboboxSelected>> On select in ComboBox
        CHANGES HERE!
        '''

        self.buttonPopulation.bind('<Button-1>', self.setPopulation)
        self.buttonSample.bind('<Button-1>', self.setSample)
        # self.buttonFocus.bind('<Button-1>', self.setFocus)
        self.buttonShowA.bind('<Button-1>', self.setFeatA)
        self.buttonShowB.bind('<Button-1>', self.setFeatB)
        self.buttonSaveDatasets.bind('<Button-1>', self.saveDataset)
        self.buttonGetFeat.bind('<Button-1>', self.getFeat)
        self.buttonTest.bind('<Button-1>', self.test)
        self.buttonQueue.bind('<Button-1>', self.queue)
        self.buttonClearQueue.bind('<Button-1>', self.clearQueue)
        self.buttonTestQueue.bind('<Button-1>', self.testQueue)
        

        self.comboBoxTestType.bind('<<ComboboxSelected>>', self.setTest)

        self.comboCriticalValue.bind('<<ComboboxSelected>>', self.getCriticalValue)

        '''
        TAB 2 - PREPROCESSOR
        '''

        self.labelFrameVariableDescriptor = LabelFrame(self.Tabs_t2)
        self.labelFrameVariableDescriptor.place(relx=0.01, rely=0.0
                                                , relheight=0.19, relwidth=0.98)
        self.labelFrameVariableDescriptor.configure(relief=GROOVE)
        self.labelFrameVariableDescriptor.configure(foreground="black")
        self.labelFrameVariableDescriptor.configure(text='''Variable Descriptor''')
        self.labelFrameVariableDescriptor.configure(background="#d9d9d9")
        self.labelFrameVariableDescriptor.configure(width=980)

        self.labelVariableFile = Label(self.labelFrameVariableDescriptor)
        self.labelVariableFile.place(relx=0.01, rely=0.17, height=26, width=172)
        self.labelVariableFile.configure(background="#d9d9d9")
        self.labelVariableFile.configure(disabledforeground="#a3a3a3")
        self.labelVariableFile.configure(foreground="#000000")
        self.labelVariableFile.configure(text='''Variable File:''')
        self.labelVariableFile.configure(width=172)

        self.entryVariableFile = Entry(self.labelFrameVariableDescriptor)
        self.entryVariableFile.place(relx=0.19, rely=0.17, relheight=0.21
                                     , relwidth=0.64)
        self.entryVariableFile.configure(background="white")
        self.entryVariableFile.configure(disabledforeground="#a3a3a3")
        self.entryVariableFile.configure(font="TkFixedFont")
        self.entryVariableFile.configure(foreground="#000000")
        self.entryVariableFile.configure(insertbackground="black")
        self.entryVariableFile.configure(width=624)

        self.buttonVariableFile = Button(self.labelFrameVariableDescriptor)
        self.buttonVariableFile.place(relx=0.84, rely=0.17, height=23, width=146)

        self.buttonVariableFile.configure(activebackground="#d9d9d9")
        self.buttonVariableFile.configure(activeforeground="#000000")
        self.buttonVariableFile.configure(background="#d9d9d9")
        self.buttonVariableFile.configure(disabledforeground="#a3a3a3")
        self.buttonVariableFile.configure(foreground="#000000")
        self.buttonVariableFile.configure(highlightbackground="#d9d9d9")
        self.buttonVariableFile.configure(highlightcolor="black")
        self.buttonVariableFile.configure(pady="0")
        self.buttonVariableFile.configure(text='''Choose File...''')
        self.buttonVariableFile.configure(width=146)

        self.labelValuesFile = Label(self.labelFrameVariableDescriptor)
        self.labelValuesFile.place(relx=0.01, rely=0.43, height=26, width=172)
        self.labelValuesFile.configure(background="#d9d9d9")
        self.labelValuesFile.configure(disabledforeground="#a3a3a3")
        self.labelValuesFile.configure(foreground="#000000")
        self.labelValuesFile.configure(text='''Values File:''')
        self.labelValuesFile.configure(width=172)

        self.entryValuesFile = Entry(self.labelFrameVariableDescriptor)
        self.entryValuesFile.place(relx=0.19, rely=0.43, relheight=0.21
                                   , relwidth=0.64)
        self.entryValuesFile.configure(background="white")
        self.entryValuesFile.configure(disabledforeground="#a3a3a3")
        self.entryValuesFile.configure(font="TkFixedFont")
        self.entryValuesFile.configure(foreground="#000000")
        self.entryValuesFile.configure(insertbackground="black")
        self.entryValuesFile.configure(width=624)

        self.buttonValuesFile = Button(self.labelFrameVariableDescriptor)
        self.buttonValuesFile.place(relx=0.84, rely=0.43, height=23, width=146)
        self.buttonValuesFile.configure(activebackground="#d9d9d9")
        self.buttonValuesFile.configure(activeforeground="#000000")
        self.buttonValuesFile.configure(background="#d9d9d9")
        self.buttonValuesFile.configure(disabledforeground="#a3a3a3")
        self.buttonValuesFile.configure(foreground="#000000")
        self.buttonValuesFile.configure(highlightbackground="#d9d9d9")
        self.buttonValuesFile.configure(highlightcolor="black")
        self.buttonValuesFile.configure(pady="0")
        self.buttonValuesFile.configure(text='''Choose File...''')
        self.buttonValuesFile.configure(width=146)

        self.buttonStartVariableDescriptor = Button(self.labelFrameVariableDescriptor)
        self.buttonStartVariableDescriptor.place(relx=0.84, rely=0.7, height=23
                                                 , width=146)
        self.buttonStartVariableDescriptor.configure(activebackground="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(activeforeground="#000000")
        self.buttonStartVariableDescriptor.configure(background="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(disabledforeground="#a3a3a3")
        self.buttonStartVariableDescriptor.configure(foreground="#000000")
        self.buttonStartVariableDescriptor.configure(highlightbackground="#d9d9d9")
        self.buttonStartVariableDescriptor.configure(highlightcolor="black")
        self.buttonStartVariableDescriptor.configure(pady="0")
        self.buttonStartVariableDescriptor.configure(text='''Start''')
        self.buttonStartVariableDescriptor.configure(width=146)
        
        '''
        self.progressBarVariableDescriptor = ttk.Progressbar(self.labelFrameVariableDescriptor)
        self.progressBarVariableDescriptor.place(relx=0.19, rely=0.7
                                                 , relwidth=0.64, relheight=0.0, height=24)
        self.progressBarVariableDescriptor.configure(length="620")
        '''
        self.listFeatA.bind('<<ListboxSelect>>', self.selectValuesDatasetA)
        self.listFeatB.bind('<<ListboxSelect>>', self.selectValuesDatasetB)
        self.listAttributes.bind('<<ListboxSelect>>', self.selectFocusFeatureValues)

        self.buttonStartVariableDescriptor.bind('<Button-1>', self.makeInitialVarDesc)
        self.buttonVariableFile.bind('<Button-1>', self.getVariableFile)
        self.buttonValuesFile.bind('<Button-1>', self.getValuesFile)


        '''
        TAB 3 - QUERY
        '''

        self.entryQueryPopulation = Entry(self.Tabs_t3)
        self.entryQueryPopulation.place(relx=0.01, rely=0.02, relheight=0.04
                                        , relwidth=0.65)
        self.entryQueryPopulation.configure(background="white")
        self.entryQueryPopulation.configure(disabledforeground="#a3a3a3")
        self.entryQueryPopulation.configure(font="TkFixedFont")
        self.entryQueryPopulation.configure(foreground="#000000")
        self.entryQueryPopulation.configure(insertbackground="black")
        self.entryQueryPopulation.configure(width=654)

        self.buttonQueryPopulation = Button(self.Tabs_t3)
        self.buttonQueryPopulation.place(relx=0.67, rely=0.02, height=23
                                         , width=316)
        self.buttonQueryPopulation.configure(activebackground="#d9d9d9")
        self.buttonQueryPopulation.configure(activeforeground="#000000")
        self.buttonQueryPopulation.configure(background="#d9d9d9")
        self.buttonQueryPopulation.configure(disabledforeground="#a3a3a3")
        self.buttonQueryPopulation.configure(foreground="#000000")
        self.buttonQueryPopulation.configure(highlightbackground="#d9d9d9")
        self.buttonQueryPopulation.configure(highlightcolor="black")
        self.buttonQueryPopulation.configure(pady="0")
        self.buttonQueryPopulation.configure(text='''Set Population''')
        self.buttonQueryPopulation.configure(width=316)

        self.labelFrameQueryDataA = LabelFrame(self.Tabs_t3)
        self.labelFrameQueryDataA.place(relx=0.01, rely=0.07, relheight=0.88
                                        , relwidth=0.48)
        self.labelFrameQueryDataA.configure(relief=GROOVE)
        self.labelFrameQueryDataA.configure(foreground="black")
        self.labelFrameQueryDataA.configure(text='''Dataset A''')
        self.labelFrameQueryDataA.configure(background="#d9d9d9")
        self.labelFrameQueryDataA.configure(width=480)

        self.entryQuerySetDataA = Entry(self.labelFrameQueryDataA)
        self.entryQuerySetDataA.place(relx=0.02, rely=0.04, relheight=0.05
                                       , relwidth=0.2)
        self.entryQuerySetDataA.configure(background="white")
        self.entryQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.entryQuerySetDataA.configure(font="TkFixedFont")
        self.entryQuerySetDataA.configure(foreground="#000000")
        self.entryQuerySetDataA.configure(insertbackground="black")
        self.entryQuerySetDataA.configure(width=94)

        self.buttonQuerySetDataA = Button(self.labelFrameQueryDataA)
        self.buttonQuerySetDataA.place(relx=0.02, rely=0.1, height=23, width=96)
        self.buttonQuerySetDataA.configure(activebackground="#d9d9d9")
        self.buttonQuerySetDataA.configure(activeforeground="#000000")
        self.buttonQuerySetDataA.configure(background="#d9d9d9")
        self.buttonQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySetDataA.configure(foreground="#000000")
        self.buttonQuerySetDataA.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySetDataA.configure(highlightcolor="black")
        self.buttonQuerySetDataA.configure(pady="0")
        self.buttonQuerySetDataA.configure(text='''Set Data''')
        self.buttonQuerySetDataA.configure(width=96)

        self.listQuerySetDataA = Listbox(self.labelFrameQueryDataA)
        self.listQuerySetDataA.place(relx=0.23, rely=0.04, relheight=0.26
                                     , relwidth=0.76)
        self.listQuerySetDataA.configure(background="white")
        self.listQuerySetDataA.configure(disabledforeground="#a3a3a3")
        self.listQuerySetDataA.configure(font="TkFixedFont")
        self.listQuerySetDataA.configure(foreground="#000000")
        self.listQuerySetDataA.configure(width=364)

        self.buttonQuerySaveA = Button(self.labelFrameQueryDataA)
        self.buttonQuerySaveA.place(relx=0.02, rely=0.15, height=23, width=96)
        self.buttonQuerySaveA.configure(activebackground="#d9d9d9")
        self.buttonQuerySaveA.configure(activeforeground="#000000")
        self.buttonQuerySaveA.configure(background="#d9d9d9")
        self.buttonQuerySaveA.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySaveA.configure(foreground="#000000")
        self.buttonQuerySaveA.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySaveA.configure(highlightcolor="black")
        self.buttonQuerySaveA.configure(pady="0")
        self.buttonQuerySaveA.configure(text='''Save''')
        self.buttonQuerySaveA.configure(width=96)

        self.labelQueryDataACount = Label(self.labelFrameQueryDataA)
        self.labelQueryDataACount.place(relx=0.02, rely=0.21, height=23, width=96)
        self.labelQueryDataACount.configure(text='Count: ')

        self.entryQueryFeatureA = Entry(self.labelFrameQueryDataA)
        self.entryQueryFeatureA.place(relx=0.02, rely=0.32, relheight=0.05
                                      , relwidth=0.76)
        self.entryQueryFeatureA.configure(background="white")
        self.entryQueryFeatureA.configure(disabledforeground="#a3a3a3")
        self.entryQueryFeatureA.configure(font="TkFixedFont")
        self.entryQueryFeatureA.configure(foreground="#000000")
        self.entryQueryFeatureA.configure(insertbackground="black")
        self.entryQueryFeatureA.configure(width=364)

        self.buttonQueryFeatureA = Button(self.labelFrameQueryDataA)
        self.buttonQueryFeatureA.place(relx=0.79, rely=0.32, height=23, width=96)

        self.buttonQueryFeatureA.configure(activebackground="#d9d9d9")
        self.buttonQueryFeatureA.configure(activeforeground="#000000")
        self.buttonQueryFeatureA.configure(background="#d9d9d9")
        self.buttonQueryFeatureA.configure(disabledforeground="#a3a3a3")
        self.buttonQueryFeatureA.configure(foreground="#000000")
        self.buttonQueryFeatureA.configure(highlightbackground="#d9d9d9")
        self.buttonQueryFeatureA.configure(highlightcolor="black")
        self.buttonQueryFeatureA.configure(pady="0")
        self.buttonQueryFeatureA.configure(text='''Enter Code''')
        self.buttonQueryFeatureA.configure(width=96)

        self.listQueryDataA = Listbox(self.labelFrameQueryDataA)
        self.listQueryDataA.place(relx=0.02, rely=0.38, relheight=0.53
                                       , relwidth=0.76)
        self.listQueryDataA.configure(background="white")
        self.listQueryDataA.configure(disabledforeground="#a3a3a3")
        self.listQueryDataA.configure(font="TkFixedFont")
        self.listQueryDataA.configure(foreground="#000000")
        self.listQueryDataA.configure(width=364)

        self.labelQueryDataA = Label(self.labelFrameQueryDataA)
        self.labelQueryDataA.place(relx=0.02, rely=0.91, height=26, width=462)
        self.labelQueryDataA.configure(background="#d9d9d9")
        self.labelQueryDataA.configure(disabledforeground="#a3a3a3")
        self.labelQueryDataA.configure(foreground="#000000")
        self.labelQueryDataA.configure(text='''Label''')
        self.labelQueryDataA.configure(width=462)

        self.labelFrameQueryDataB = LabelFrame(self.Tabs_t3)
        self.labelFrameQueryDataB.place(relx=0.5, rely=0.07, relheight=0.88
                                        , relwidth=0.48)
        self.labelFrameQueryDataB.configure(relief=GROOVE)
        self.labelFrameQueryDataB.configure(foreground="black")
        self.labelFrameQueryDataB.configure(text='''Dataset B''')
        self.labelFrameQueryDataB.configure(background="#d9d9d9")
        self.labelFrameQueryDataB.configure(width=480)

        self.entryQuerySetDataB = Entry(self.labelFrameQueryDataB)
        self.entryQuerySetDataB.place(relx=0.02, rely=0.04, relheight=0.05
                                      , relwidth=0.2)
        self.entryQuerySetDataB.configure(background="white")
        self.entryQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.entryQuerySetDataB.configure(font="TkFixedFont")
        self.entryQuerySetDataB.configure(foreground="#000000")
        self.entryQuerySetDataB.configure(insertbackground="black")
        self.entryQuerySetDataB.configure(width=94)

        self.buttonQuerySetDataB = Button(self.labelFrameQueryDataB)
        self.buttonQuerySetDataB.place(relx=0.02, rely=0.1, height=23, width=96)
        self.buttonQuerySetDataB.configure(activebackground="#d9d9d9")
        self.buttonQuerySetDataB.configure(activeforeground="#000000")
        self.buttonQuerySetDataB.configure(background="#d9d9d9")
        self.buttonQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySetDataB.configure(foreground="#000000")
        self.buttonQuerySetDataB.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySetDataB.configure(highlightcolor="black")
        self.buttonQuerySetDataB.configure(pady="0")
        self.buttonQuerySetDataB.configure(text='''Set Data''')
        self.buttonQuerySetDataB.configure(width=96)

        self.listQuerySetDataB = Listbox(self.labelFrameQueryDataB)
        self.listQuerySetDataB.place(relx=0.23, rely=0.04, relheight=0.26
                                     , relwidth=0.76)
        self.listQuerySetDataB.configure(background="white")
        self.listQuerySetDataB.configure(disabledforeground="#a3a3a3")
        self.listQuerySetDataB.configure(font="TkFixedFont")
        self.listQuerySetDataB.configure(foreground="#000000")
        self.listQuerySetDataB.configure(width=364)

        self.buttonQuerySaveB = Button(self.labelFrameQueryDataB)
        self.buttonQuerySaveB.place(relx=0.02, rely=0.15, height=23, width=96)
        self.buttonQuerySaveB.configure(activebackground="#d9d9d9")
        self.buttonQuerySaveB.configure(activeforeground="#000000")
        self.buttonQuerySaveB.configure(background="#d9d9d9")
        self.buttonQuerySaveB.configure(disabledforeground="#a3a3a3")
        self.buttonQuerySaveB.configure(foreground="#000000")
        self.buttonQuerySaveB.configure(highlightbackground="#d9d9d9")
        self.buttonQuerySaveB.configure(highlightcolor="black")
        self.buttonQuerySaveB.configure(pady="0")
        self.buttonQuerySaveB.configure(text='''Save''')
        self.buttonQuerySaveB.configure(width=96)

        self.labelQueryDataBCount = Label(self.labelFrameQueryDataB)
        self.labelQueryDataBCount.place(relx=0.02, rely=0.21, height=23, width=96)
        self.labelQueryDataBCount.configure(text='Count: ')

        self.entryQueryFeatureB = Entry(self.labelFrameQueryDataB)
        self.entryQueryFeatureB.place(relx=0.02, rely=0.32, relheight=0.05
                                      , relwidth=0.76)
        self.entryQueryFeatureB.configure(background="white")
        self.entryQueryFeatureB.configure(disabledforeground="#a3a3a3")
        self.entryQueryFeatureB.configure(font="TkFixedFont")
        self.entryQueryFeatureB.configure(foreground="#000000")
        self.entryQueryFeatureB.configure(insertbackground="black")
        self.entryQueryFeatureB.configure(width=364)

        self.buttonQueryFeatureB = Button(self.labelFrameQueryDataB)
        self.buttonQueryFeatureB.place(relx=0.79, rely=0.32, height=23, width=96)

        self.buttonQueryFeatureB.configure(activebackground="#d9d9d9")
        self.buttonQueryFeatureB.configure(activeforeground="#000000")
        self.buttonQueryFeatureB.configure(background="#d9d9d9")
        self.buttonQueryFeatureB.configure(disabledforeground="#a3a3a3")
        self.buttonQueryFeatureB.configure(foreground="#000000")
        self.buttonQueryFeatureB.configure(highlightbackground="#d9d9d9")
        self.buttonQueryFeatureB.configure(highlightcolor="black")
        self.buttonQueryFeatureB.configure(pady="0")
        self.buttonQueryFeatureB.configure(text='''Enter Code''')
        self.buttonQueryFeatureB.configure(width=96)

        self.listQueryDataB = Listbox(self.labelFrameQueryDataB)
        self.listQueryDataB.place(relx=0.04, rely=0.38, relheight=0.53
                                       , relwidth=0.76)
        self.listQueryDataB.configure(background="white")
        self.listQueryDataB.configure(disabledforeground="#a3a3a3")
        self.listQueryDataB.configure(font="TkFixedFont")
        self.listQueryDataB.configure(foreground="#000000")
        self.listQueryDataB.configure(width=364)

        self.labelQueryDataB = Label(self.labelFrameQueryDataB)
        self.labelQueryDataB.place(relx=0.02, rely=0.91, height=26, width=462)
        self.labelQueryDataB.configure(background="#d9d9d9")
        self.labelQueryDataB.configure(disabledforeground="#a3a3a3")
        self.labelQueryDataB.configure(foreground="#000000")
        self.labelQueryDataB.configure(text='''Label''')
        self.labelQueryDataB.configure(width=462)

        self.labelQueryZTest = Label(self.Tabs_t3)
        self.labelQueryZTest.place(relx=0.12, rely=0.95, height=26, width=862)
        self.labelQueryZTest.configure(background="#d9d9d9")
        self.labelQueryZTest.configure(disabledforeground="#a3a3a3")
        self.labelQueryZTest.configure(foreground="#000000")
        self.labelQueryZTest.configure(text='''Label''')
        self.labelQueryZTest.configure(width=862)

        self.buttonQueryZTest = Button(self.Tabs_t3)
        self.buttonQueryZTest.place(relx=0.01, rely=0.95, height=23, width=106)
        self.buttonQueryZTest.configure(activebackground="#d9d9d9")
        self.buttonQueryZTest.configure(activeforeground="#000000")
        self.buttonQueryZTest.configure(background="#d9d9d9")
        self.buttonQueryZTest.configure(disabledforeground="#a3a3a3")
        self.buttonQueryZTest.configure(foreground="#000000")
        self.buttonQueryZTest.configure(highlightbackground="#d9d9d9")
        self.buttonQueryZTest.configure(highlightcolor="black")
        self.buttonQueryZTest.configure(pady="0")
        self.buttonQueryZTest.configure(text='''Z-Test''')
        self.buttonQueryZTest.configure(width=106)

        '''
        BINDING FOR QUERY TAB
        '''

        self.buttonQueryPopulation.bind('<Button-1>', self.querySetPopulation)
        self.buttonQuerySetDataA.bind('<Button-1>', self.querySetDataA)
        self.buttonQuerySetDataB.bind('<Button-1>', self.querySetDataB)
        self.buttonQuerySaveA.bind('<Button-1>', self.querySaveDataA)
        self.buttonQuerySaveB.bind('<Button-1>', self.querySaveDataB)
        self.buttonQueryFeatureA.bind('<Button-1>', self.querySetFeatureA)
        self.buttonQueryFeatureB.bind('<Button-1>', self.querySetFeatureB)
        self.buttonQueryZTest.bind('<Button-1>', self.queryZTest)


        #######################################3

        '''
        Reading features from Initial Variable Description

        '''
        initVarDisc = "InitialVarDesc.csv"
        global features
        features = readFeatures(initVarDisc,"^")

        global testType
        testType = ''
        global sampleFeature
        global selectedFocusFeature
        global allValues
        global selectedFocusFeatureValues 

        global populationDir
        global Za
        Za = 1.27
        populationDir = ""
        self.populationDataset = []
        self.datasetA = {'Data':[]}
        self.datasetB = {'Data':[]}

        global tests
        tests = []

        self.labelFeatACount.configure(text="Dataset Count: " + str(len(self.datasetA['Data'])))
        self.labelFeatBCount.configure(text="Dataset Count: " + str(len(self.datasetB['Data']))) 

        '''
        self.labelFramePreprocessor = LabelFrame(self.Tabs_t2)
        self.labelFramePreprocessor.place(relx=0.01, rely=0.2, relheight=0.19
                                          , relwidth=1.11)
        self.labelFramePreprocessor.configure(relief=GROOVE)
        self.labelFramePreprocessor.configure(foreground="black")
        self.labelFramePreprocessor.configure(text="Preprocessor")
        self.labelFramePreprocessor.configure(background="#d9d9d9")
        self.labelFramePreprocessor.configure(highlightbackground="#d9d9d9")
        self.labelFramePreprocessor.configure(highlightcolor="black")
        self.labelFramePreprocessor.configure(width=1110)

        self.labelVariableDescriptor = Label(self.labelFramePreprocessor)
        self.labelVariableDescriptor.place(relx=0.01, rely=0.17, height=26
                                           , width=172)
        self.labelVariableDescriptor.configure(activebackground="#f9f9f9")
        self.labelVariableDescriptor.configure(activeforeground="black")
        self.labelVariableDescriptor.configure(background="#d9d9d9")
        self.labelVariableDescriptor.configure(disabledforeground="#a3a3a3")
        self.labelVariableDescriptor.configure(foreground="#000000")
        self.labelVariableDescriptor.configure(highlightbackground="#d9d9d9")
        self.labelVariableDescriptor.configure(highlightcolor="black")
        self.labelVariableDescriptor.configure(text="Variable Descriptor:")

        self.buttonVariableDescriptor = Button(self.labelFramePreprocessor)
        self.buttonVariableDescriptor.place(relx=0.74, rely=0.17, height=23
                                            , width=146)
        self.buttonVariableDescriptor.configure(activebackground="#d9d9d9")
        self.buttonVariableDescriptor.configure(activeforeground="#000000")
        self.buttonVariableDescriptor.configure(background="#d9d9d9")
        self.buttonVariableDescriptor.configure(disabledforeground="#a3a3a3")
        self.buttonVariableDescriptor.configure(foreground="#000000")
        self.buttonVariableDescriptor.configure(highlightbackground="#d9d9d9")
        self.buttonVariableDescriptor.configure(highlightcolor="black")
        self.buttonVariableDescriptor.configure(pady="0")
        self.buttonVariableDescriptor.configure(text="Choose File...")

        self.labelRawDataset = Label(self.labelFramePreprocessor)
        self.labelRawDataset.place(relx=0.01, rely=0.43, height=26, width=172)
        self.labelRawDataset.configure(activebackground="#f9f9f9")
        self.labelRawDataset.configure(activeforeground="black")
        self.labelRawDataset.configure(background="#d9d9d9")
        self.labelRawDataset.configure(disabledforeground="#a3a3a3")
        self.labelRawDataset.configure(foreground="#000000")
        self.labelRawDataset.configure(highlightbackground="#d9d9d9")
        self.labelRawDataset.configure(highlightcolor="black")
        self.labelRawDataset.configure(text="Raw Dataset: ")

        self.entryRawDataset = Entry(self.labelFramePreprocessor)
        self.entryRawDataset.place(relx=0.17, rely=0.43, relheight=0.21
                                   , relwidth=0.56)
        self.entryRawDataset.configure(background="white")
        self.entryRawDataset.configure(disabledforeground="#a3a3a3")
        self.entryRawDataset.configure(font="TkFixedFont")
        self.entryRawDataset.configure(foreground="#000000")
        self.entryRawDataset.configure(highlightbackground="#d9d9d9")
        self.entryRawDataset.configure(highlightcolor="black")
        self.entryRawDataset.configure(insertbackground="black")
        self.entryRawDataset.configure(selectbackground="#c4c4c4")
        self.entryRawDataset.configure(selectforeground="black")

        self.buttonRawDataset = Button(self.labelFramePreprocessor)
        self.buttonRawDataset.place(relx=0.74, rely=0.43, height=23, width=146)
        self.buttonRawDataset.configure(activebackground="#d9d9d9")
        self.buttonRawDataset.configure(activeforeground="#000000")
        self.buttonRawDataset.configure(background="#d9d9d9")
        self.buttonRawDataset.configure(disabledforeground="#a3a3a3")
        self.buttonRawDataset.configure(foreground="#000000")
        self.buttonRawDataset.configure(highlightbackground="#d9d9d9")
        self.buttonRawDataset.configure(highlightcolor="black")
        self.buttonRawDataset.configure(pady="0")
        self.buttonRawDataset.configure(text="Choose File...")

        self.buttonStartPreprocessor = Button(self.labelFramePreprocessor)
        self.buttonStartPreprocessor.place(relx=0.74, rely=0.7, height=23
                                           , width=146)
        self.buttonStartPreprocessor.configure(activebackground="#d9d9d9")
        self.buttonStartPreprocessor.configure(activeforeground="#000000")
        self.buttonStartPreprocessor.configure(background="#d9d9d9")
        self.buttonStartPreprocessor.configure(disabledforeground="#a3a3a3")
        self.buttonStartPreprocessor.configure(foreground="#000000")
        self.buttonStartPreprocessor.configure(highlightbackground="#d9d9d9")
        self.buttonStartPreprocessor.configure(highlightcolor="black")
        self.buttonStartPreprocessor.configure(pady="0")
        self.buttonStartPreprocessor.configure(text="Start")
        '''

        '''
        self.progressBarPreprocessor = ttk.Progressbar(self.labelFramePreprocessor)
        self.progressBarPreprocessor.place(relx=0.17, rely=0.7, relwidth=0.56
                                           , relheight=0.0, height=24)
                                           '''
        '''
        self.entryVarDescriptor = Entry(self.labelFramePreprocessor)
        self.entryVarDescriptor.place(relx=0.17, rely=0.17, relheight=0.21, relwidth=0.56)
        self.entryVarDescriptor.configure(background="white")
        self.entryVarDescriptor.configure(disabledforeground="#a3a3a3")
        self.entryVarDescriptor.configure(font="TkFixedFont")
        self.entryVarDescriptor.configure(foreground="#000000")
        self.entryVarDescriptor.configure(insertbackground="black")
        self.entryVarDescriptor.configure(width=624)
        '''

    '''
    Functions to be called by the bound commands
    '''
    #Adds test to the queue
    def addToQueue(self, testType, **params):
        global tests
        test = {'Type':testType}
        for key in params:
            if(key == 'popDirArg'):
                test['Population Path'] = copy.copy(params[key])
            elif(key == 'sampleFeatArg'):
                test['Sample Feature'] = copy.copy(params[key])
            elif(key == 'selectedFeatArg'):
                test['Selected Feature'] = copy.copy(params[key])
            elif(key == 'allValArg'):
                test['SF All Values'] = copy.copy(params[key])
            elif(key == 'selValArg'):
                test['SF Selected Values'] = copy.copy(params[key])
            elif(key == 'datasetArgs'):
                test['Datasets'] = copy.deepcopy(params[key])
            elif(key == 'zArg'):
                test['Z Critical Value'] = copy.copy(params[key])
        tests.append(test)
        self.labelQueueCount.configure(text='Queue Count: ' + str(len(tests)))
        tkMessageBox.showinfo("Test queued", test['Type'] + " has been queued.")


    '''
    DEFINING BOUND COMMANDS
    '''
    #Create the Initial Variable Descriptor
    def makeInitialVarDesc(self):
        varFileDir = self.entryVariableFile.get()
        valFileDir = self.entryValuesFile.get()
        print 'Make the Initial Variable Descriptor! (WIP)'
    
    def getVariableFile(self):
        varFileDir = askopenfilename(title = "Select variable file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryVariableFile.delete(0, END)
        self.entryVariableFile.insert(0, varFileDir)
    
    def getValuesFile(self):
        valFileDir = askopenfilename(title = "Select values file",filetypes = (("txt files","*.txt"),("all files","*.*")))
        self.entryValuesFile.delete(0,END)
        self.entryValuesFile.insert(0, valFileDir)

    # ABOUT US
    def showAbout(self):
        strAbout = "OTOO Miner v4.0\n" \
                   "by TE3D House\n" \
                   "De La Salle University - Laguna"
        tkMessageBox.showinfo("About", strAbout)


    # UPLOAD MODULE
    def setPopulation(self, evt):
        global populationDir
        populationDir = askopenfilename(title = "Select file",filetypes = (("csv files","*.csv"),("all files","*.*")))
        self.entryPopulation.delete(0, END)
        self.entryPopulation.insert(0, populationDir)
        self.entryQueryPopulation.delete(0,END)
        self.entryQueryPopulation.insert(0,populationDir)
        self.buttonPopulation.configure(state='normal')
        self.populationDataset = readCSVDict(populationDir)
        if(len(list(self.populationDataset)) > 0):
            tkMessageBox.showinfo("Population set", "Population loaded")
    
    def selectValuesDatasetA(self, evt):
        selectDatasetValues(evt, self.datasetA, self.populationDataset, self.labelFeatACount)
        '''
        global populationDir
        listbox = evt.widget
        selectedValues = [listbox.get(i) for i in listbox.curselection()]
        self.datasetA['Selected Responses']=[]
        for sv in selectedValues:
            responseArr = sv.split(" - ")
            for response in self.datasetA['Feature']['Responses']:
                if response['Code'] == responseArr[0]:
                    selected_response = copy.deepcopy(response)
                    self.datasetA['Selected Responses'].append(selected_response)
        self.datasetA['Data']=[]
        if not (populationDir == ""):
            self.populationDataset = readCSVDict(populationDir)
            for record in self.populationDataset:
                if any (response['Code'] == record[self.datasetA['Feature']['Code']] for response in self.datasetA['Selected Responses']):
                    self.datasetA['Data'].append(record)
        else:
            tkMessageBox.showwarning("Error: No population", "No population dataset uploaded.")
        self.labelFeatACount.configure(text="Dataset Count: " + str(len(self.datasetA['Data'])))
        '''
        
    def selectFocusFeatureValues(self, evt):
        global selectedFocusFeatureValues
        listbox = evt.widget
        selectedValues = [listbox.get(i) for i in listbox.curselection()]
        selectedFocusFeatureValues = []
        for sv in selectedValues:
            valueArr = sv.split(" - ")
            selectedFocusFeatureValues.append(valueArr[0])
        

    def selectValuesDatasetB(self, evt):
        global populationDir
        listbox = evt.widget
        selectedValues = [listbox.get(i) for i in listbox.curselection()]
        self.datasetB['Selected Responses']=[]
        for sv in selectedValues:
            responseArr = sv.split(" - ")
            for response in self.datasetB['Feature']['Responses']:
                if response['Code'] == responseArr[0]:
                    selected_response = copy.deepcopy(response)
                    self.datasetB['Selected Responses'].append(selected_response)
        self.datasetB['Data']=[]
        if not (populationDir == ""):
            self.populationDataset = readCSVDict(populationDir)
            for record in self.populationDataset:
                if any (response['Code'] == record[self.datasetB['Feature']['Code']] for response in self.datasetB['Selected Responses']):
                    self.datasetB['Data'].append(record)
        else:
            tkMessageBox.showwarning("Error: No population", "No population dataset uploaded.")
        self.labelFeatBCount.configure(text="Dataset Count: " + str(len(self.datasetB['Data'])))

    
    # SET FEATURES A
    def setFeatA(self, evt):
        setDatasetFeatures(self.entryFeatA.get(),self.listFeatA,self.datasetA)


    # SET FEATURES B
    def setFeatB(self, evt):
        setDatasetFeatures(self.entryFeatB.get(), self.listFeatB, self.datasetB)

    # GET FEATURE CODE AND SET SAMPLE
    def setSample(self, evt):
        # Here is how to get the value from entrySample
        global sampleFeature
        global features
        sampleFeature = self.entrySample.get()
        found = False
        for feature in features:
            if(sampleFeature == feature['Code']):
                description = copy.deepcopy(feature['Description'])
                if(len(description) > 60 ):
                    description = description[:61] + "..."
                self.labelSample.configure(text="Sample Feature: "+feature['Code']+" - "+description)
                found = True
                break
        if not found:
            tkMessageBox.showerror("Error: Feature not found", "Sample feature not found.")
            sampleFeature=''
            self.labelSample.configure(text="Sample Feature: None")

    # GENERATE AND SAVE THE DATASETS BASED ON THE INPUT
    def saveDataset(self, evt):
        # Save dataset
        datasets=[]
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        for dataset in datasets:
            if(len(dataset['Data']) > 0):
                fileName = makeFileName(dataset)
                writeCSVDict(fileName, dataset['Data'])
                tkMessageBox.showinfo("Dataset saved", "Dataset saved as " + fileName)

    # GET FEATURE CODE FOR Z TEST / SET FOCUS
    def getFeat(self, evt):
        global selectedFocusFeature

        # Here is how to get the value from focus feature
        featCode = self.entryFocus.get()

        strFeature = "Feature code not found."
        arrTempItemsC = []

        for feature in features:
            if feature['Code'] == featCode:
                strFeature = feature['Code'] + " - " + feature['Description']
                selectedFocusFeature = copy.deepcopy(feature)
                for response in selectedFocusFeature['Responses']:
                    tempResp = response['Code'] + " - " + response['Description']
                    arrTempItemsC.append(tempResp)
                break

        self.textFeature.config(text=strFeature)

        #DELETE THEN SET VALUES TO THE ATTRIBUTE LIST
        self.listAttributes.delete(0, END)
        
        for C in arrTempItemsC:
            self.listAttributes.insert(END, C)

    

    
    #Do regular test based on what is inputted in the UI
    def test(self, evt):
        datasets = []
        fileNames = []
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        global selectedFocusFeature
        global sampleFeature
        global Za
        global allValues
        global selectedFocusFeatureValues
        global populationDir
        global features
        if(testType == 'Sample vs Population'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            saveFile = svp.sampleVsPopulation(populationDir, sampleFeature, selectedFocusFeature['Code'], allValues, selectedValues, Za)
            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
        elif(testType == 'Sample vs Sample'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            for i in range(0, len(datasets)):
                fileName = makeFileName(datasets[i])
                writeCSVDict(fileName, datasets[i]['Data'])
                fileNames.append(fileName)
            saveFile = svs.sampleVsSample(fileNames, selectedFocusFeature['Code'], allValues, selectedValues)
            removeFiles(fileNames)
            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
        elif(testType == 'Chi-test'):
            i = 0
            for dataset in datasets:
                convertDatasetValuesToGroups(dataset, features)
                fileName = makeFileName(dataset)
                i = i + 1
                writeCSVDict(fileName, dataset['Data'])
                fileNames.append(fileName)
            if not (os.path.isfile("Updated-Variables.csv")):
                makeUpdatedVariables(features, "Updated-Variables.csv")
            saveFile = ct.chiTest(fileNames)
            removeFiles(fileNames)
            tkMessageBox.showinfo(testType, testType + " completed. Results file saved as " + saveFile)
        else:
            tkMessageBox.showerror("Error: No test selected", "Please select a test")

    #Function that happens when the 'Enqueue' button is pressed
    def queue(self, evt):
        datasets = []
        datasets.append(self.datasetA)
        datasets.append(self.datasetB)
        global testType
        if(testType == 'Sample vs Population'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            self.addToQueue(testType, popDirArg = populationDir, sampleFeatArg = sampleFeature, selectedFeatArg = selectedFocusFeature['Code'], allValArg = allValues, selValArg = selectedValues, zArg = Za)
        elif(testType == 'Sample vs Sample'):
            allValues, selectedValues = getFocusFeatureValues(selectedFocusFeature, selectedFocusFeatureValues)
            self.addToQueue(testType, datasetArgs = datasets, selectedFeatArg = selectedFocusFeature['Code'], allValArg = allValues, selValArg = selectedValues)
        elif(testType == 'Chi-test'):
            self.addToQueue(testType, datasetArgs=datasets)
        else:
            tkMessageBox.showerror("Error: No test selected", "Please select a test")

    #Conducts all of the tests in the queue. 
    def testQueue(self, evt):
        if len(tests) == 0:
            tkMessageBox.showerror("Empty queue", "Queue is empty. Please queue a test.")
            return -1
        for test in tests:
            fileNames = []
            if(test['Type'] == 'Sample vs Population'):
                svp.sampleVsPopulation(test['Population Path'], test['Sample Feature'], test['Selected Feature'], test['SF All Values'], test['SF Selected Values'], test['Z Critical Value'])
            elif(test['Type'] == 'Sample vs Sample'):
                for i in range(0, len(test['Datasets'])):
                    fileName = makeFileName(test['Datasets'][i])
                    writeCSVDict(fileName, test['Datasets'][i]['Data'])
                    fileNames.append(fileName)
                svs.sampleVsSample(fileNames, test['Selected Feature'], test['SF All Values'], test['SF Selected Values'])
                removeFiles(fileNames)
            elif(test['Type'] == 'Chi-test'):
                i = 0
                for dataset in test['Datasets']:
                    convertDatasetValuesToGroups(dataset, features)
                    fileName = makeFileName(dataset)
                    i = i + 1
                    writeCSVDict(fileName, dataset['Data'])
                    fileNames.append(fileName)
                if not (os.path.isfile("Updated-Variables.csv")):
                    makeUpdatedVariables(features, "Updated-Variables.csv")
                ct.chiTest(fileNames)
                removeFiles(fileNames)
        tkMessageBox.showinfo("Test Queue Complete", "All of the tests in the queue have been completed.")


    def clearQueue(self, evt):
        tests[:] = []
        self.labelQueueCount.configure(text='Queue Count: ' + str(len(tests)))
        self.resetViews()
        tkMessageBox.showinfo("Reset", "Queue cleared.")
        
    def resetViews(self):
        global sampleFeature
        global selectedFocusFeature
        global allValues
        sampleFeature = ''
        selectedFocusFeature=''
        allValues = ''
        self.entryFeatA.delete(0,END)
        self.entryFeatB.delete(0,END)
        self.entryFocus.delete(0,END)
        self.labelFeatACount.configure(text='Dataset Count: '+ str(0))
        self.labelFeatBCount.configure(text='Dataset Count: '+ str(0))
        self.listFeatA.delete(0, END)
        self.listFeatB.delete(0, END)
        self.listAttributes.delete(0,END)

        
            
    # SET THE TEST WHEN SELECTED IN COMBOBOX
    def setTest(self, evt):
        global testType
        testType = self.comboBoxTestType.get()
        self.textTestType.destroy()
        self.adjustViews()

    # DISABLE BUTTONS/ENTRIES BASED ON TEST SELECTED
    def adjustViews(self):
        # ["Chi-test","Z-score statistics of pooled proportions","Standard Error of Population"]
        self.buttonGetFeat.configure(state='normal')
        self.labelZCriticalValue.configure(state='normal')
        self.labelFeature.configure(state='normal')
        self.buttonGetFeat.configure(state='normal')
        self.buttonSample.configure(state='normal')
        self.entrySample.configure(state='normal')
        self.comboCriticalValue.configure(state='readonly')
        self.entryFocus.configure(state='normal')
        self.entryFocus.delete(0, END)
        self.entryFeatA.configure(state='normal')
        self.entryFeatA.delete(0, END)
        self.entryFeatB.configure(state='normal')
        self.entryFeatB.delete(0, END)
        self.buttonShowA.configure(state='normal')
        self.buttonShowB.configure(state='normal')

        # UNLOCK WHEN TEST SELECTED
        self.entryVariableFile.configure(state='normal')
        self.entryVariableFile.delete(0, END)
        self.entryPopulation.configure(state='normal')
        self.buttonPopulation.configure(state='normal')
        self.buttonTest.configure(state='normal')
        self.buttonTestQueue.configure(state='normal')
        self.buttonPopulation.configure(state='normal')
        self.buttonClearQueue.configure(state='normal')
        self.buttonQueue.configure(state='normal')
        self.buttonSaveDatasets.configure(state='normal')
        self.listAttributes.configure(state='normal')
        self.listAttributes.delete(0, END)
        self.listFeatA.configure(state='normal')
        self.listFeatA.delete(0, END)
        self.listFeatB.configure(state='normal')
        self.listFeatA.delete(0, END)
        self.comboCriticalValue.configure(state='readonly')
        if testType == 'Chi-test':
            self.buttonGetFeat.configure(state='disabled')
            self.labelZCriticalValue.configure(state='disabled')
            self.labelFeature.configure(state='disabled')
            self.buttonGetFeat.configure(state='disabled')
            self.buttonSample.configure(state='disabled')
            self.comboCriticalValue.configure(state='disabled')
            self.entryFocus.configure(state='disabled')
            self.entrySample.configure(state='disabled')
            self.entryFocus.configure(state='disabled')
        elif testType == 'Sample vs Sample':
            self.buttonSample.configure(state='disabled')
            self.entrySample.configure(state='disabled')
            self.comboCriticalValue.configure(state='disabled')
        elif testType == 'Sample vs Population':
            self.comboCriticalValue.configure(state='readonly')
            self.entryFeatA.configure(state='disabled')
            self.entryFeatB.configure(state='disabled')
            self.buttonShowA.configure(state='disabled')
            self.buttonShowB.configure(state='disabled')
    '''
    CHANGES HERE!
    '''
    def getCriticalValue(self, evt):
        global criticalValue
        global Za
        criticalValue = self.comboCriticalValue.get()
        if criticalValue == "0.80":
            print 1.27
            Za = 1.27
        elif criticalValue == "0.90":
            print 1.645
            Za = 1.645
        elif criticalValue == "0.95":
            print 1.645
            Za = 1.96
        elif criticalValue == "0.98":
            print 2.33
            Za = 2.33
        elif criticalValue == "0.99":
            print 2.58
            Za = 2.58
        else:
            print -1
            Za = -1

    '''
    QUERY FUNCTIONS
    '''

    def querySetPopulation(self, evt):
        self.setPopulation(evt)

    def querySetDataA(self, evt):
        setDatasetFeatures(self.entryQuerySetDataA.get(), self.listQuerySetDataA,self.datasetA)

    def querySetDataB(self, evt):
        setDatasetFeatures(self.entryQuerySetDataB.get(), self.listQuerySetDataB, self.datasetB)

    def querySaveDataA(self, evt):
        print 'Saving Data A'


    def querySaveDataB(self, evt):
        print 'Saving Data B'


    def querySetFeatureA(self, evt):
        print 'Setting Feature in Data A'

        queryDataAFeature = self.entryQueryFeatureA.get()

        queryArrayC = ['A', 'B', 'C', 'D']

        for qC in queryArrayC:
            self.listQueryDataA.insert(END, qC)

    def querySetFeatureB(self, evt):
        print 'Setting Feature in Data B'

        queryDataBFeature = self.entryQueryFeatureB.get()

        queryArrayD = ['A', 'B', 'C', 'D']

        for qD in queryArrayD:
            self.listQueryDataB.insert(END, qD)

    def queryZTest(self, evt):
        print 'Z Test'
        self.labelQueryZTest.configure(text=' >> VIEW RESULTS HERE << ')


if __name__ == '__main__':
    vp_start_gui()




